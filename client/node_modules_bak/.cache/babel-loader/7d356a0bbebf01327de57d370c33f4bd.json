{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i['return']) _i['return']();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError('Invalid attempt to destructure non-iterable instance');\n    }\n  };\n}();\n\nvar _util = require('./util');\n\nvar _inject = require('./inject');\n\nvar StyleSheet = {\n  create: function create(sheetDefinition) {\n    return (0, _util.mapObj)(sheetDefinition, function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      var key = _ref2[0];\n      var val = _ref2[1];\n      return [key, {\n        // TODO(emily): Make a 'production' mode which doesn't prepend\n        // the class name here, to make the generated CSS smaller.\n        _name: key + '_' + (0, _util.hashObject)(val),\n        _definition: val\n      }];\n    });\n  },\n  rehydrate: function rehydrate() {\n    var renderedClassNames = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n    (0, _inject.addRenderedClassNames)(renderedClassNames);\n  }\n};\n/**\n * Utilities for using Aphrodite server-side.\n */\n\nvar StyleSheetServer = {\n  renderStatic: function renderStatic(renderFunc) {\n    (0, _inject.reset)();\n    (0, _inject.startBuffering)();\n    var html = renderFunc();\n    var cssContent = (0, _inject.flushToString)();\n    return {\n      html: html,\n      css: {\n        content: cssContent,\n        renderedClassNames: (0, _inject.getRenderedClassNames)()\n      }\n    };\n  }\n};\n/**\n * Utilities for using Aphrodite in tests.\n *\n * Not meant to be used in production.\n */\n\nvar StyleSheetTestUtils = {\n  /**\n   * Prevent styles from being injected into the DOM.\n   *\n   * This is useful in situations where you'd like to test rendering UI\n   * components which use Aphrodite without any of the side-effects of\n   * Aphrodite happening. Particularly useful for testing the output of\n   * components when you have no DOM, e.g. testing in Node without a fake DOM.\n   *\n   * Should be paired with a subsequent call to\n   * clearBufferAndResumeStyleInjection.\n   */\n  suppressStyleInjection: function suppressStyleInjection() {\n    (0, _inject.reset)();\n    (0, _inject.startBuffering)();\n  },\n\n  /**\n   * Opposite method of preventStyleInject.\n   */\n  clearBufferAndResumeStyleInjection: function clearBufferAndResumeStyleInjection() {\n    (0, _inject.reset)();\n  }\n};\n\nvar css = function css() {\n  for (var _len = arguments.length, styleDefinitions = Array(_len), _key = 0; _key < _len; _key++) {\n    styleDefinitions[_key] = arguments[_key];\n  }\n\n  var useImportant = true; // Append !important to all style definitions\n\n  return (0, _inject.injectAndGetClassName)(useImportant, styleDefinitions);\n};\n\nexports['default'] = {\n  StyleSheet: StyleSheet,\n  StyleSheetServer: StyleSheetServer,\n  StyleSheetTestUtils: StyleSheetTestUtils,\n  css: css\n};\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}