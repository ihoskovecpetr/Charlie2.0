{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i['return']) _i['return']();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError('Invalid attempt to destructure non-iterable instance');\n    }\n  };\n}();\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar _inlineStylePrefixerStatic = require('inline-style-prefixer/static');\n\nvar _inlineStylePrefixerStatic2 = _interopRequireDefault(_inlineStylePrefixerStatic);\n\nvar _util = require('./util');\n/**\n * Generate CSS for a selector and some styles.\n *\n * This function handles the media queries, pseudo selectors, and descendant\n * styles that can be used in aphrodite styles.\n *\n * @param {string} selector: A base CSS selector for the styles to be generated\n *     with.\n * @param {Object} styleTypes: A list of properties of the return type of\n *     StyleSheet.create, e.g. [styles.red, styles.blue].\n * @param stringHandlers: See `generateCSSRuleset`\n * @param useImportant: See `generateCSSRuleset`\n *\n * To actually generate the CSS special-construct-less styles are passed to\n * `generateCSSRuleset`.\n *\n * For instance, a call to\n *\n *     generateCSSInner(\".foo\", {\n *       color: \"red\",\n *       \"@media screen\": {\n *         height: 20,\n *         \":hover\": {\n *           backgroundColor: \"black\"\n *         }\n *       },\n *       \":active\": {\n *         fontWeight: \"bold\",\n *         \">>bar\": {\n *           _names: { \"foo_bar\": true },\n *           height: 10,\n *         }\n *       }\n *     });\n *\n * will make 5 calls to `generateCSSRuleset`:\n *\n *     generateCSSRuleset(\".foo\", { color: \"red\" }, ...)\n *     generateCSSRuleset(\".foo:active\", { fontWeight: \"bold\" }, ...)\n *     generateCSSRuleset(\".foo:active .foo_bar\", { height: 10 }, ...)\n *     // These 2 will be wrapped in @media screen {}\n *     generateCSSRuleset(\".foo\", { height: 20 }, ...)\n *     generateCSSRuleset(\".foo:hover\", { backgroundColor: \"black\" }, ...)\n */\n\n\nvar generateCSS = function generateCSS(selector, styleTypes, stringHandlers, useImportant) {\n  var merged = styleTypes.reduce(_util.recursiveMerge);\n  var declarations = {};\n  var mediaQueries = {};\n  var pseudoStyles = {};\n  Object.keys(merged).forEach(function (key) {\n    if (key[0] === ':') {\n      pseudoStyles[key] = merged[key];\n    } else if (key[0] === '@') {\n      mediaQueries[key] = merged[key];\n    } else {\n      declarations[key] = merged[key];\n    }\n  });\n  return generateCSSRuleset(selector, declarations, stringHandlers, useImportant) + Object.keys(pseudoStyles).map(function (pseudoSelector) {\n    return generateCSSRuleset(selector + pseudoSelector, pseudoStyles[pseudoSelector], stringHandlers, useImportant);\n  }).join(\"\") + Object.keys(mediaQueries).map(function (mediaQuery) {\n    var ruleset = generateCSS(selector, [mediaQueries[mediaQuery]], stringHandlers, useImportant);\n    return mediaQuery + '{' + ruleset + '}';\n  }).join(\"\");\n};\n\nexports.generateCSS = generateCSS;\n/**\n * Helper method of generateCSSRuleset to facilitate custom handling of certain\n * CSS properties. Used for e.g. font families.\n *\n * See generateCSSRuleset for usage and documentation of paramater types.\n */\n\nvar runStringHandlers = function runStringHandlers(declarations, stringHandlers) {\n  var result = {};\n  Object.keys(declarations).forEach(function (key) {\n    // If a handler exists for this particular key, let it interpret\n    // that value first before continuing\n    if (stringHandlers && stringHandlers.hasOwnProperty(key)) {\n      result[key] = stringHandlers[key](declarations[key]);\n    } else {\n      result[key] = declarations[key];\n    }\n  });\n  return result;\n};\n/**\n * Generate a CSS ruleset with the selector and containing the declarations.\n *\n * This function assumes that the given declarations don't contain any special\n * children (such as media queries, pseudo-selectors, or descendant styles).\n *\n * Note that this method does not deal with nesting used for e.g.\n * psuedo-selectors or media queries. That responsibility is left to  the\n * `generateCSS` function.\n *\n * @param {string} selector: the selector associated with the ruleset\n * @param {Object} declarations: a map from camelCased CSS property name to CSS\n *     property value.\n * @param {Object.<string, function>} stringHandlers: a map from camelCased CSS\n *     property name to a function which will map the given value to the value\n *     that is output.\n * @param {bool} useImportant: A boolean saying whether to append \"!important\"\n *     to each of the CSS declarations.\n * @returns {string} A string of raw CSS.\n *\n * Examples:\n *\n *    generateCSSRuleset(\".blah\", { color: \"red\" })\n *    -> \".blah{color: red !important;}\"\n *    generateCSSRuleset(\".blah\", { color: \"red\" }, {}, false)\n *    -> \".blah{color: red}\"\n *    generateCSSRuleset(\".blah\", { color: \"red\" }, {color: c => c.toUpperCase})\n *    -> \".blah{color: RED}\"\n *    generateCSSRuleset(\".blah:hover\", { color: \"red\" })\n *    -> \".blah:hover{color: red}\"\n */\n\n\nvar generateCSSRuleset = function generateCSSRuleset(selector, declarations, stringHandlers, useImportant) {\n  var handledDeclarations = runStringHandlers(declarations, stringHandlers);\n  var prefixedDeclarations = (0, _inlineStylePrefixerStatic2['default'])(handledDeclarations);\n  var prefixedRules = (0, _util.flatten)((0, _util.objectToPairs)(prefixedDeclarations).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var key = _ref2[0];\n    var value = _ref2[1];\n\n    if (Array.isArray(value)) {\n      var _ret = function () {\n        // inline-style-prefix-all returns an array when there should be\n        // multiple rules, we will flatten to single rules\n        var prefixedValues = [];\n        var unprefixedValues = [];\n        value.forEach(function (v) {\n          if (v.indexOf('-') === 0) {\n            prefixedValues.push(v);\n          } else {\n            unprefixedValues.push(v);\n          }\n        });\n        prefixedValues.sort();\n        unprefixedValues.sort();\n        return {\n          v: prefixedValues.concat(unprefixedValues).map(function (v) {\n            return [key, v];\n          })\n        };\n      }();\n\n      if (typeof _ret === 'object') return _ret.v;\n    }\n\n    return [[key, value]];\n  }));\n  var rules = prefixedRules.map(function (_ref3) {\n    var _ref32 = _slicedToArray(_ref3, 2);\n\n    var key = _ref32[0];\n    var value = _ref32[1];\n    var stringValue = (0, _util.stringifyValue)(key, value);\n    var ret = (0, _util.kebabifyStyleName)(key) + ':' + stringValue + ';';\n    return useImportant === false ? ret : (0, _util.importantify)(ret);\n  }).join(\"\");\n\n  if (rules) {\n    return selector + '{' + rules + '}';\n  } else {\n    return \"\";\n  }\n};\n\nexports.generateCSSRuleset = generateCSSRuleset;","map":null,"metadata":{},"sourceType":"script"}