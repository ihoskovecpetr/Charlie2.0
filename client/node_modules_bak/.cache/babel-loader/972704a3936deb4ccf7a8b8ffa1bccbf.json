{"ast":null,"code":"import _defineProperty from\"/Users/petrhoskovec/Desktop/code/Charlie2.0/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import React from\"react\";import ReactDOM from\"react-dom\";import{Route,BrowserRouter as Router}from\"react-router-dom\";import{ApolloClient,InMemoryCache,HttpLink,split,gql}from\"apollo-boost\";import{BatchHttpLink}from\"apollo-link-batch-http\";import{ApolloProvider}from\"@apollo/react-hooks\";import{WebSocketLink}from\"apollo-link-ws\";import{setContext}from\"apollo-link-context\";import{getMainDefinition}from\"apollo-utilities\";import App from\"./App\";var GQL_ENDPOINT=\"http://localhost:4005/graphql\";if(process.env.NODE_ENV==\"production\"){GQL_ENDPOINT=\"https://\".concat(window.location.host,\"/graphql\");}var httpLink=new BatchHttpLink({uri:GQL_ENDPOINT,headers:{authorization:window.localStorage.getItem(\"token\")}});var WS_ENDPOINT=\"ws://localhost:4005/subs\";if(process.env.NODE_ENV==\"production\"){WS_ENDPOINT=\"wss://\".concat(window.location.host,\"/subs\");}var wsLink=new WebSocketLink({uri:WS_ENDPOINT,options:{reconnect:true}});var authLink=setContext(function(_,_ref){var headers=_ref.headers;// get the authentication token from local storage if it exists\nvar token=window.localStorage.getItem(\"token\");// return the headers to the context so httpLink can read them\nreturn{headers:_objectSpread({},headers,{authorization:\"Bearer \".concat(token)})};});var link=split(function(_ref2){var query=_ref2.query;var _getMainDefinition=getMainDefinition(query),kind=_getMainDefinition.kind,operation=_getMainDefinition.operation;return kind===\"OperationDefinition\"&&operation===\"subscription\";},wsLink,authLink.concat(httpLink));var defaultOptions={// watchQuery: {\n//   fetchPolicy: \"no-cache\",\n//   errorPolicy: \"ignore\"\n// },\nquery:{fetchPolicy:\"network-only\",errorPolicy:\"all\"}};//const link = httpLink;\nvar client=new ApolloClient({link:link,cache:new InMemoryCache(),defaultOptions:defaultOptions});// const client = new ApolloClient({\n//     uri: \"http://localhost:8008\", cache: new InMemoryCache()\n//   });\nReactDOM.hydrate(React.createElement(ApolloProvider,{client:client},React.createElement(App,null)),document.getElementById(\"root\"));// <Router>\n//     <Route component={props => <App {...props} />} />\n//   </Router>","map":{"version":3,"sources":["/Users/petrhoskovec/Desktop/code/Charlie2.0/client/src/index.js"],"names":["React","ReactDOM","Route","BrowserRouter","Router","ApolloClient","InMemoryCache","HttpLink","split","gql","BatchHttpLink","ApolloProvider","WebSocketLink","setContext","getMainDefinition","App","GQL_ENDPOINT","process","env","NODE_ENV","window","location","host","httpLink","uri","headers","authorization","localStorage","getItem","WS_ENDPOINT","wsLink","options","reconnect","authLink","_","token","link","query","kind","operation","concat","defaultOptions","fetchPolicy","errorPolicy","client","cache","hydrate","document","getElementById"],"mappings":"m5BAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,WAArB,CACA,OAASC,KAAT,CAAgBC,aAAa,GAAIC,CAAAA,MAAjC,KAA+C,kBAA/C,CACA,OACEC,YADF,CAEEC,aAFF,CAGEC,QAHF,CAIEC,KAJF,CAKEC,GALF,KAMO,cANP,CAOA,OAASC,aAAT,KAA8B,wBAA9B,CACA,OAASC,cAAT,KAA+B,qBAA/B,CACA,OAASC,aAAT,KAA8B,gBAA9B,CACA,OAASC,UAAT,KAA2B,qBAA3B,CACA,OAASC,iBAAT,KAAkC,kBAAlC,CAEA,MAAOC,CAAAA,GAAP,KAAgB,OAAhB,CAEA,GAAIC,CAAAA,YAAY,gCAAhB,CACA,GAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,EAAwB,YAA5B,CAA0C,CACxCH,YAAY,mBAAcI,MAAM,CAACC,QAAP,CAAgBC,IAA9B,YAAZ,CACD,CACD,GAAMC,CAAAA,QAAQ,CAAG,GAAIb,CAAAA,aAAJ,CAAkB,CACjCc,GAAG,CAAER,YAD4B,CAEjCS,OAAO,CAAE,CACPC,aAAa,CAAEN,MAAM,CAACO,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,CADR,CAFwB,CAAlB,CAAjB,CAOA,GAAIC,CAAAA,WAAW,2BAAf,CACA,GAAIZ,OAAO,CAACC,GAAR,CAAYC,QAAZ,EAAwB,YAA5B,CAA0C,CACxCU,WAAW,iBAAYT,MAAM,CAACC,QAAP,CAAgBC,IAA5B,SAAX,CACD,CAED,GAAMQ,CAAAA,MAAM,CAAG,GAAIlB,CAAAA,aAAJ,CAAkB,CAC/BY,GAAG,CAAEK,WAD0B,CAE/BE,OAAO,CAAE,CACPC,SAAS,CAAE,IADJ,CAFsB,CAAlB,CAAf,CAOA,GAAMC,CAAAA,QAAQ,CAAGpB,UAAU,CAAC,SAACqB,CAAD,MAAoB,IAAdT,CAAAA,OAAc,MAAdA,OAAc,CAC9C;AACA,GAAMU,CAAAA,KAAK,CAAGf,MAAM,CAACO,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,CAAd,CACA;AACA,MAAO,CACLH,OAAO,kBACFA,OADE,EAELC,aAAa,kBAAYS,KAAZ,CAFR,EADF,CAAP,CAMD,CAV0B,CAA3B,CAYA,GAAMC,CAAAA,IAAI,CAAG5B,KAAK,CAChB,eAAe,IAAZ6B,CAAAA,KAAY,OAAZA,KAAY,wBACevB,iBAAiB,CAACuB,KAAD,CADhC,CACLC,IADK,oBACLA,IADK,CACCC,SADD,oBACCA,SADD,CAEb,MAAOD,CAAAA,IAAI,GAAK,qBAAT,EAAkCC,SAAS,GAAK,cAAvD,CACD,CAJe,CAKhBT,MALgB,CAMhBG,QAAQ,CAACO,MAAT,CAAgBjB,QAAhB,CANgB,CAAlB,CASA,GAAMkB,CAAAA,cAAc,CAAG,CACrB;AACA;AACA;AACA;AACAJ,KAAK,CAAE,CACLK,WAAW,CAAE,cADR,CAELC,WAAW,CAAE,KAFR,CALc,CAAvB,CAWA;AAEA,GAAMC,CAAAA,MAAM,CAAG,GAAIvC,CAAAA,YAAJ,CAAiB,CAC9B+B,IAAI,CAAJA,IAD8B,CAE9BS,KAAK,CAAE,GAAIvC,CAAAA,aAAJ,EAFuB,CAG9BmC,cAAc,CAAEA,cAHc,CAAjB,CAAf,CAMA;AACA;AACA;AAEAxC,QAAQ,CAAC6C,OAAT,CACE,oBAAC,cAAD,EAAgB,MAAM,CAAEF,MAAxB,EACE,oBAAC,GAAD,MADF,CADF,CAIEG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF,EAMA;AACA;AACA","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  HttpLink,\n  split,\n  gql\n} from \"apollo-boost\";\nimport { BatchHttpLink } from \"apollo-link-batch-http\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { setContext } from \"apollo-link-context\";\nimport { getMainDefinition } from \"apollo-utilities\";\n\nimport App from \"./App\";\n\nvar GQL_ENDPOINT = `http://localhost:4005/graphql`;\nif (process.env.NODE_ENV == \"production\") {\n  GQL_ENDPOINT = `https://${window.location.host}/graphql`;\n}\nconst httpLink = new BatchHttpLink({\n  uri: GQL_ENDPOINT,\n  headers: {\n    authorization: window.localStorage.getItem(\"token\")\n  }\n});\n\nvar WS_ENDPOINT = `ws://localhost:4005/subs`;\nif (process.env.NODE_ENV == \"production\") {\n  WS_ENDPOINT = `wss://${window.location.host}/subs`;\n}\n\nconst wsLink = new WebSocketLink({\n  uri: WS_ENDPOINT,\n  options: {\n    reconnect: true\n  }\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = window.localStorage.getItem(\"token\");\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: `Bearer ${token}`\n    }\n  };\n});\n\nconst link = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query);\n    return kind === \"OperationDefinition\" && operation === \"subscription\";\n  },\n  wsLink,\n  authLink.concat(httpLink)\n);\n\nconst defaultOptions = {\n  // watchQuery: {\n  //   fetchPolicy: \"no-cache\",\n  //   errorPolicy: \"ignore\"\n  // },\n  query: {\n    fetchPolicy: \"network-only\",\n    errorPolicy: \"all\"\n  }\n};\n\n//const link = httpLink;\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  defaultOptions: defaultOptions\n});\n\n// const client = new ApolloClient({\n//     uri: \"http://localhost:8008\", cache: new InMemoryCache()\n//   });\n\nReactDOM.hydrate(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n// <Router>\n//     <Route component={props => <App {...props} />} />\n//   </Router>\n"]},"metadata":{},"sourceType":"module"}