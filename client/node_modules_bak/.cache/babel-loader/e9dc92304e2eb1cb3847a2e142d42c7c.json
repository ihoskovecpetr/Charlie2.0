{"ast":null,"code":"import _defineProperty from \"/Users/petrhoskovec/Desktop/code/Charlie2.0/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/petrhoskovec/Desktop/code/Charlie2.0/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/petrhoskovec/Desktop/code/Charlie2.0/client/src/Molecules/DropzoneSignup.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useCallback } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\nimport CropFreeIcon from '@material-ui/icons/CropFree';\nimport { useDropzone } from \"react-dropzone\";\nimport Gallery from \"react-grid-gallery\";\nimport request from \"superagent\";\nimport WallpaperIcon from \"@material-ui/icons/Wallpaper\";\nimport Spinner from \"../Atoms/Spinner\";\nconst CLOUDINARY_UPLOAD_PRESET = \"simple-preset-1\";\nconst CLOUDINARY_UPLOAD_URL = \"https://api.cloudinary.com/v1_1/party-images-app/upload\";\nlet smallfile;\nvar urlTumb;\n\nfunction MyDropzone({\n  formValue,\n  setFormValue\n}) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isUploading = _useState2[0],\n        setIsUploading = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        uploadedFiles = _useState4[0],\n        setUploadedFiles = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        display = _useState6[0],\n        setDisplay = _useState6[1];\n\n  const onDrop = useCallback(acceptedFiles => {\n    // Do something with the files\n    setIsUploading(true);\n    acceptedFiles.map(file => {\n      handleImageUpload(file);\n    });\n  }, []);\n\n  const _useDropzone = useDropzone({\n    onDrop\n  }),\n        getRootProps = _useDropzone.getRootProps,\n        getInputProps = _useDropzone.getInputProps,\n        isDragActive = _useDropzone.isDragActive;\n\n  const handleImageUpload = file => {\n    const width = 200;\n    const height = 100;\n    const fileName = file.name;\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = event => {\n      const img = document.createElement(\"img\");\n      img.src = event.target.result;\n\n      img.onload = () => {\n        const elem = document.createElement(\"canvas\");\n        let TumbWidth = img.width;\n        let TumbHeight = img.height;\n\n        if (img.width > 200 && img.height > 200) {\n          if (img.width > img.height) {\n            let hRatio = img.height / 200;\n            TumbWidth = img.width / hRatio;\n            TumbHeight = 200;\n          } else if (img.width < img.height) {\n            let wRatio = img.width / 200;\n            TumbWidth = 200;\n            TumbHeight = img.height / wRatio;\n          }\n        }\n\n        elem.width = TumbWidth;\n        elem.height = TumbHeight;\n        const ctx = elem.getContext(\"2d\"); // img.width and img.height will contain the original dimensions\n\n        ctx.drawImage(img, 0, 0, TumbWidth, TumbHeight);\n        ctx.canvas.toBlob(blob => {\n          smallfile = new File([blob], fileName, {\n            type: \"image/jpeg\",\n            lastModified: Date.now()\n          });\n          uploadingOneImg(smallfile, file);\n        }, \"image/jpeg\", 1);\n      };\n\n      reader.onerror = error => console.log(error);\n    };\n  };\n\n  const uploadingOneImg = (imgTumb, imgFull) => {\n    //var divider;\n    var upload = request.post(CLOUDINARY_UPLOAD_URL).field(\"upload_preset\", CLOUDINARY_UPLOAD_PRESET).field(\"file\", imgTumb);\n    upload.end((err, response) => {\n      if (err) {\n        console.error(err);\n        window.alert(\"Problem with uploading your picture..\");\n      }\n\n      if (response.body.secure_url !== \"\") {\n        urlTumb = response.body.secure_url;\n      }\n\n      var upload2 = request.post(CLOUDINARY_UPLOAD_URL).field(\"upload_preset\", CLOUDINARY_UPLOAD_PRESET).field(\"file\", imgFull);\n      upload2.end((err, response) => {\n        if (err) {\n          window.alert(\"Problem with uploading your picture..\");\n        }\n\n        if (response.body.secure_url !== \"\") {\n          var uplArr = uploadedFiles;\n          uplArr.push({\n            src: response.body.secure_url,\n            thumbnail: urlTumb,\n            thumbnailWidth: response.body.width,\n            scaletwidth: 100,\n            thumbnailHeight: response.body.height,\n            isSelected: false,\n            caption: \"After Rain (Jeshu John - designerspics.com)\"\n          });\n          setUploadedFiles([...uplArr]);\n          setIsUploading(false);\n          setDisplay(true);\n          setFormValue(prevValues => {\n            return _objectSpread({}, prevValues, {\n              ImagesArr: uplArr,\n              picture: urlTumb\n            });\n          });\n        }\n      });\n    });\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", Object.assign({}, getRootProps(), {\n    style: {\n      padding: \"5px\",\n      border: \"2px dashed grey\",\n      cursor: \"pointer\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  })), urlTumb && !isUploading ? // <Avatar style={{ background: \"green\" }}>\n  //   <CheckCircleOutlineIcon />\n  // </Avatar>\n  React.createElement(Avatar, {\n    alt: \"Remy Sharp\",\n    src: formValue.picture,\n    style: {\n      height: 100,\n      width: 100\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }) : null, !urlTumb && !isUploading ? React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    style: {\n      background: \"lightgrey\",\n      height: 100,\n      width: 100,\n      borderRadius: 5\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, formValue.picture ? React.createElement(Avatar, {\n    alt: \"Remy Sharp\",\n    src: formValue.picture,\n    style: {\n      height: 100,\n      width: 100\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }) : React.createElement(CropFreeIcon, {\n    fontSize: \"large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }))) : null, isUploading ? React.createElement(Spinner, {\n    height: 100,\n    width: 100,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }) : null));\n}\n\nexport default MyDropzone;","map":{"version":3,"sources":["/Users/petrhoskovec/Desktop/code/Charlie2.0/client/src/Molecules/DropzoneSignup.js"],"names":["React","useState","useCallback","Grid","Avatar","PersonAddIcon","CropFreeIcon","useDropzone","Gallery","request","WallpaperIcon","Spinner","CLOUDINARY_UPLOAD_PRESET","CLOUDINARY_UPLOAD_URL","smallfile","urlTumb","MyDropzone","formValue","setFormValue","isUploading","setIsUploading","uploadedFiles","setUploadedFiles","display","setDisplay","onDrop","acceptedFiles","map","file","handleImageUpload","getRootProps","getInputProps","isDragActive","width","height","fileName","name","reader","FileReader","readAsDataURL","onload","event","img","document","createElement","src","target","result","elem","TumbWidth","TumbHeight","hRatio","wRatio","ctx","getContext","drawImage","canvas","toBlob","blob","File","type","lastModified","Date","now","uploadingOneImg","onerror","error","console","log","imgTumb","imgFull","upload","post","field","end","err","response","window","alert","body","secure_url","upload2","uplArr","push","thumbnail","thumbnailWidth","scaletwidth","thumbnailHeight","isSelected","caption","prevValues","ImagesArr","picture","padding","border","cursor","background","borderRadius"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AAEA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AAEA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AAEA,OAAOC,OAAP,MAAoB,kBAApB;AAEA,MAAMC,wBAAwB,GAAG,iBAAjC;AACA,MAAMC,qBAAqB,GACzB,yDADF;AAEA,IAAIC,SAAJ;AACA,IAAIC,OAAJ;;AAEA,SAASC,UAAT,CAAoB;AAACC,EAAAA,SAAD;AAAYC,EAAAA;AAAZ,CAApB,EAA+C;AAAA,oBACPjB,QAAQ,CAAC,KAAD,CADD;AAAA;AAAA,QACtCkB,WADsC;AAAA,QACzBC,cADyB;;AAAA,qBAEHnB,QAAQ,CAAC,EAAD,CAFL;AAAA;AAAA,QAEtCoB,aAFsC;AAAA,QAEvBC,gBAFuB;;AAAA,qBAGfrB,QAAQ,CAAC,KAAD,CAHO;AAAA;AAAA,QAGtCsB,OAHsC;AAAA,QAG7BC,UAH6B;;AAI7C,QAAMC,MAAM,GAAGvB,WAAW,CAACwB,aAAa,IAAI;AAC1C;AAEAN,IAAAA,cAAc,CAAC,IAAD,CAAd;AAEAM,IAAAA,aAAa,CAACC,GAAd,CAAkBC,IAAI,IAAI;AACxBC,MAAAA,iBAAiB,CAACD,IAAD,CAAjB;AACD,KAFD;AAGD,GARyB,EAQvB,EARuB,CAA1B;;AAJ6C,uBAaSrB,WAAW,CAAC;AAAEkB,IAAAA;AAAF,GAAD,CAbpB;AAAA,QAarCK,YAbqC,gBAarCA,YAbqC;AAAA,QAavBC,aAbuB,gBAavBA,aAbuB;AAAA,QAaRC,YAbQ,gBAaRA,YAbQ;;AAe7C,QAAMH,iBAAiB,GAAGD,IAAI,IAAI;AAChC,UAAMK,KAAK,GAAG,GAAd;AACA,UAAMC,MAAM,GAAG,GAAf;AACA,UAAMC,QAAQ,GAAGP,IAAI,CAACQ,IAAtB;AAEA,UAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,IAAAA,MAAM,CAACE,aAAP,CAAqBX,IAArB;;AACAS,IAAAA,MAAM,CAACG,MAAP,GAAgBC,KAAK,IAAI;AACvB,YAAMC,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAZ;AACAF,MAAAA,GAAG,CAACG,GAAJ,GAAUJ,KAAK,CAACK,MAAN,CAAaC,MAAvB;;AAEAL,MAAAA,GAAG,CAACF,MAAJ,GAAa,MAAM;AACjB,cAAMQ,IAAI,GAAGL,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AAEA,YAAIK,SAAS,GAAGP,GAAG,CAACT,KAApB;AACA,YAAIiB,UAAU,GAAGR,GAAG,CAACR,MAArB;;AAEA,YAAIQ,GAAG,CAACT,KAAJ,GAAY,GAAZ,IAAmBS,GAAG,CAACR,MAAJ,GAAa,GAApC,EAAyC;AACvC,cAAIQ,GAAG,CAACT,KAAJ,GAAYS,GAAG,CAACR,MAApB,EAA4B;AAC1B,gBAAIiB,MAAM,GAAGT,GAAG,CAACR,MAAJ,GAAa,GAA1B;AACAe,YAAAA,SAAS,GAAGP,GAAG,CAACT,KAAJ,GAAYkB,MAAxB;AACAD,YAAAA,UAAU,GAAG,GAAb;AACD,WAJD,MAIO,IAAIR,GAAG,CAACT,KAAJ,GAAYS,GAAG,CAACR,MAApB,EAA4B;AACjC,gBAAIkB,MAAM,GAAGV,GAAG,CAACT,KAAJ,GAAY,GAAzB;AACAgB,YAAAA,SAAS,GAAG,GAAZ;AACAC,YAAAA,UAAU,GAAGR,GAAG,CAACR,MAAJ,GAAakB,MAA1B;AACD;AACF;;AAEDJ,QAAAA,IAAI,CAACf,KAAL,GAAagB,SAAb;AACAD,QAAAA,IAAI,CAACd,MAAL,GAAcgB,UAAd;AACA,cAAMG,GAAG,GAAGL,IAAI,CAACM,UAAL,CAAgB,IAAhB,CAAZ,CApBiB,CAqBjB;;AACAD,QAAAA,GAAG,CAACE,SAAJ,CAAcb,GAAd,EAAmB,CAAnB,EAAsB,CAAtB,EAAyBO,SAAzB,EAAoCC,UAApC;AACAG,QAAAA,GAAG,CAACG,MAAJ,CAAWC,MAAX,CACEC,IAAI,IAAI;AACN5C,UAAAA,SAAS,GAAG,IAAI6C,IAAJ,CAAS,CAACD,IAAD,CAAT,EAAiBvB,QAAjB,EAA2B;AACrCyB,YAAAA,IAAI,EAAE,YAD+B;AAErCC,YAAAA,YAAY,EAAEC,IAAI,CAACC,GAAL;AAFuB,WAA3B,CAAZ;AAIAC,UAAAA,eAAe,CAAClD,SAAD,EAAYc,IAAZ,CAAf;AACD,SAPH,EAQE,YARF,EASE,CATF;AAWD,OAlCD;;AAmCAS,MAAAA,MAAM,CAAC4B,OAAP,GAAiBC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAA1B;AACD,KAxCD;AAyCD,GAhDD;;AAkDA,QAAMF,eAAe,GAAG,CAACK,OAAD,EAAUC,OAAV,KAAsB;AAC5C;AACA,QAAIC,MAAM,GAAG9D,OAAO,CACjB+D,IADU,CACL3D,qBADK,EAEV4D,KAFU,CAEJ,eAFI,EAEa7D,wBAFb,EAGV6D,KAHU,CAGJ,MAHI,EAGIJ,OAHJ,CAAb;AAIAE,IAAAA,MAAM,CAACG,GAAP,CAAW,CAACC,GAAD,EAAMC,QAAN,KAAmB;AAC5B,UAAID,GAAJ,EAAS;AACPR,QAAAA,OAAO,CAACD,KAAR,CAAcS,GAAd;AACAE,QAAAA,MAAM,CAACC,KAAP,CAAa,uCAAb;AACD;;AAED,UAAIF,QAAQ,CAACG,IAAT,CAAcC,UAAd,KAA6B,EAAjC,EAAqC;AACnCjE,QAAAA,OAAO,GAAG6D,QAAQ,CAACG,IAAT,CAAcC,UAAxB;AACD;;AAED,UAAIC,OAAO,GAAGxE,OAAO,CAClB+D,IADW,CACN3D,qBADM,EAEX4D,KAFW,CAEL,eAFK,EAEY7D,wBAFZ,EAGX6D,KAHW,CAGL,MAHK,EAGGH,OAHH,CAAd;AAIAW,MAAAA,OAAO,CAACP,GAAR,CAAY,CAACC,GAAD,EAAMC,QAAN,KAAmB;AAC7B,YAAID,GAAJ,EAAS;AACPE,UAAAA,MAAM,CAACC,KAAP,CAAa,uCAAb;AACD;;AACD,YAAIF,QAAQ,CAACG,IAAT,CAAcC,UAAd,KAA6B,EAAjC,EAAqC;AACnC,cAAIE,MAAM,GAAG7D,aAAb;AACA6D,UAAAA,MAAM,CAACC,IAAP,CAAY;AACVtC,YAAAA,GAAG,EAAE+B,QAAQ,CAACG,IAAT,CAAcC,UADT;AAEVI,YAAAA,SAAS,EAAErE,OAFD;AAGVsE,YAAAA,cAAc,EAAET,QAAQ,CAACG,IAAT,CAAc9C,KAHpB;AAIVqD,YAAAA,WAAW,EAAE,GAJH;AAKVC,YAAAA,eAAe,EAAEX,QAAQ,CAACG,IAAT,CAAc7C,MALrB;AAMVsD,YAAAA,UAAU,EAAE,KANF;AAOVC,YAAAA,OAAO,EAAE;AAPC,WAAZ;AAUAnE,UAAAA,gBAAgB,CAAC,CAAC,GAAG4D,MAAJ,CAAD,CAAhB;AACA9D,UAAAA,cAAc,CAAC,KAAD,CAAd;AACAI,UAAAA,UAAU,CAAC,IAAD,CAAV;AACAN,UAAAA,YAAY,CAACwE,UAAU,IAAI;AACzB,qCAAYA,UAAZ;AAAwBC,cAAAA,SAAS,EAAET,MAAnC;AAA2CU,cAAAA,OAAO,EAAE7E;AAApD;AACD,WAFW,CAAZ;AAGD;AACF,OAvBD;AAwBD,KAtCD;AAuCD,GA7CD;;AA+CA,SACE,0CACE,6CAASe,YAAY,EAArB;AAAyB,IAAA,KAAK,EAAE;AAAE+D,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA,MAAM,EAAE,iBAA1B;AAA6CC,MAAAA,MAAM,EAAE;AAArD,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE,+CAAWhE,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EAEGhB,OAAO,IAAI,CAACI,WAAZ,GACC;AACA;AACA;AACA,sBAAC,MAAD;AACE,IAAA,GAAG,EAAC,YADN;AAEE,IAAA,GAAG,EAAEF,SAAS,CAAC2E,OAFjB;AAGE,IAAA,KAAK,EAAE;AAAE1D,MAAAA,MAAM,EAAE,GAAV;AAAeD,MAAAA,KAAK,EAAE;AAAtB,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJD,GASG,IAXN,EAYG,CAAClB,OAAD,IAAY,CAACI,WAAb,GACC,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAC,QAAxB;AAAiC,IAAA,UAAU,EAAC,QAA5C;AAAqD,IAAA,KAAK,EAAE;AAAE6E,MAAAA,UAAU,EAAE,WAAd;AAA2B9D,MAAAA,MAAM,EAAE,GAAnC;AAAwCD,MAAAA,KAAK,EAAE,GAA/C;AAAoDgE,MAAAA,YAAY,EAAE;AAAlE,KAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGhF,SAAS,CAAC2E,OAAV,GAAoB,oBAAC,MAAD;AACnB,IAAA,GAAG,EAAC,YADe;AAEnB,IAAA,GAAG,EAAE3E,SAAS,CAAC2E,OAFI;AAGnB,IAAA,KAAK,EAAE;AAAE1D,MAAAA,MAAM,EAAE,GAAV;AAAeD,MAAAA,KAAK,EAAE;AAAtB,KAHY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAApB,GAKC,oBAAC,YAAD;AAAc,IAAA,QAAQ,EAAC,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CADF,CADD,GAWG,IAvBN,EAwBGd,WAAW,GAAG,oBAAC,OAAD;AAAS,IAAA,MAAM,EAAE,GAAjB;AAAsB,IAAA,KAAK,EAAE,GAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAA0C,IAxBxD,CADF,CADF;AA8BD;;AAED,eAAeH,UAAf","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\nimport CropFreeIcon from '@material-ui/icons/CropFree';\n\nimport { useDropzone } from \"react-dropzone\";\nimport Gallery from \"react-grid-gallery\";\nimport request from \"superagent\";\nimport WallpaperIcon from \"@material-ui/icons/Wallpaper\";\n\nimport Spinner from \"../Atoms/Spinner\";\n\nconst CLOUDINARY_UPLOAD_PRESET = \"simple-preset-1\";\nconst CLOUDINARY_UPLOAD_URL =\n  \"https://api.cloudinary.com/v1_1/party-images-app/upload\";\nlet smallfile;\nvar urlTumb;\n\nfunction MyDropzone({formValue, setFormValue}) {\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadedFiles, setUploadedFiles] = useState([]);\n  const [display, setDisplay] = useState(false);\n  const onDrop = useCallback(acceptedFiles => {\n    // Do something with the files\n\n    setIsUploading(true);\n\n    acceptedFiles.map(file => {\n      handleImageUpload(file);\n    });\n  }, []);\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  const handleImageUpload = file => {\n    const width = 200;\n    const height = 100;\n    const fileName = file.name;\n\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = event => {\n      const img = document.createElement(\"img\");\n      img.src = event.target.result;\n\n      img.onload = () => {\n        const elem = document.createElement(\"canvas\");\n\n        let TumbWidth = img.width;\n        let TumbHeight = img.height;\n\n        if (img.width > 200 && img.height > 200) {\n          if (img.width > img.height) {\n            let hRatio = img.height / 200;\n            TumbWidth = img.width / hRatio;\n            TumbHeight = 200;\n          } else if (img.width < img.height) {\n            let wRatio = img.width / 200;\n            TumbWidth = 200;\n            TumbHeight = img.height / wRatio;\n          }\n        }\n\n        elem.width = TumbWidth;\n        elem.height = TumbHeight;\n        const ctx = elem.getContext(\"2d\");\n        // img.width and img.height will contain the original dimensions\n        ctx.drawImage(img, 0, 0, TumbWidth, TumbHeight);\n        ctx.canvas.toBlob(\n          blob => {\n            smallfile = new File([blob], fileName, {\n              type: \"image/jpeg\",\n              lastModified: Date.now()\n            });\n            uploadingOneImg(smallfile, file);\n          },\n          \"image/jpeg\",\n          1\n        );\n      };\n      reader.onerror = error => console.log(error);\n    };\n  };\n\n  const uploadingOneImg = (imgTumb, imgFull) => {\n    //var divider;\n    var upload = request\n      .post(CLOUDINARY_UPLOAD_URL)\n      .field(\"upload_preset\", CLOUDINARY_UPLOAD_PRESET)\n      .field(\"file\", imgTumb);\n    upload.end((err, response) => {\n      if (err) {\n        console.error(err);\n        window.alert(\"Problem with uploading your picture..\");\n      }\n\n      if (response.body.secure_url !== \"\") {\n        urlTumb = response.body.secure_url;\n      }\n\n      var upload2 = request\n        .post(CLOUDINARY_UPLOAD_URL)\n        .field(\"upload_preset\", CLOUDINARY_UPLOAD_PRESET)\n        .field(\"file\", imgFull);\n      upload2.end((err, response) => {\n        if (err) {\n          window.alert(\"Problem with uploading your picture..\");\n        }\n        if (response.body.secure_url !== \"\") {\n          var uplArr = uploadedFiles;\n          uplArr.push({\n            src: response.body.secure_url,\n            thumbnail: urlTumb,\n            thumbnailWidth: response.body.width,\n            scaletwidth: 100,\n            thumbnailHeight: response.body.height,\n            isSelected: false,\n            caption: \"After Rain (Jeshu John - designerspics.com)\"\n          });\n\n          setUploadedFiles([...uplArr]);\n          setIsUploading(false);\n          setDisplay(true);\n          setFormValue(prevValues => {\n            return { ...prevValues, ImagesArr: uplArr, picture: urlTumb };\n          });\n        }\n      });\n    });\n  };\n\n  return (\n    <>\n      <div {...getRootProps()} style={{ padding: \"5px\", border: \"2px dashed grey\", cursor: \"pointer\"}}>\n        <input {...getInputProps()} />\n        {urlTumb && !isUploading ? (\n          // <Avatar style={{ background: \"green\" }}>\n          //   <CheckCircleOutlineIcon />\n          // </Avatar>\n          <Avatar\n            alt=\"Remy Sharp\"\n            src={formValue.picture}\n            style={{ height: 100, width: 100 }}\n          ></Avatar>\n        ) : null}\n        {!urlTumb && !isUploading ? (\n          <Grid container justify='center' alignItems='center' style={{ background: \"lightgrey\", height: 100, width: 100, borderRadius: 5 }}>\n            <Grid item>\n              {formValue.picture ? <Avatar\n                alt=\"Remy Sharp\"\n                src={formValue.picture}\n                style={{ height: 100, width: 100 }}\n              ></Avatar>\n              : <CropFreeIcon fontSize=\"large\" />} \n            </Grid>\n          </Grid>\n        ) : null}\n        {isUploading ? <Spinner height={100} width={100} /> : null}\n      </div>\n    </>\n  );\n}\n\nexport default MyDropzone;\n"]},"metadata":{},"sourceType":"module"}