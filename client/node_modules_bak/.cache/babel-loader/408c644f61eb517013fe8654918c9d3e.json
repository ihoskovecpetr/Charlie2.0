{"ast":null,"code":"/*\n  Ported to JavaScript by Lazar Laszlo 2011\n\n  lazarsoft@gmail.com, www.lazarsoft.info\n\n*/\n\n/*\n*\n* Copyright 2007 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport { URShift } from './qrcode';\nexport default function BitMatrix(width, height) {\n  if (!height) height = width;\n\n  if (width < 1 || height < 1) {\n    throw \"Both dimensions must be greater than 0\";\n  }\n\n  this.width = width;\n  this.height = height;\n  var rowSize = width >> 5;\n\n  if ((width & 0x1f) != 0) {\n    rowSize++;\n  }\n\n  this.rowSize = rowSize;\n  this.bits = new Array(rowSize * height);\n\n  for (var i = 0; i < this.bits.length; i++) {\n    this.bits[i] = 0;\n  }\n}\nObject.defineProperty(BitMatrix.prototype, \"Dimension\", {\n  get: function get() {\n    if (this.width != this.height) {\n      throw \"Can't call getDimension() on a non-square matrix\";\n    }\n\n    return this.width;\n  }\n});\n\nBitMatrix.prototype.get_Renamed = function (x, y) {\n  var offset = y * this.rowSize + (x >> 5);\n  return (URShift(this.bits[offset], x & 0x1f) & 1) != 0;\n};\n\nBitMatrix.prototype.set_Renamed = function (x, y) {\n  var offset = y * this.rowSize + (x >> 5);\n  this.bits[offset] |= 1 << (x & 0x1f);\n};\n\nBitMatrix.prototype.flip = function (x, y) {\n  var offset = y * this.rowSize + (x >> 5);\n  this.bits[offset] ^= 1 << (x & 0x1f);\n};\n\nBitMatrix.prototype.clear = function () {\n  var max = this.bits.length;\n\n  for (var i = 0; i < max; i++) {\n    this.bits[i] = 0;\n  }\n};\n\nBitMatrix.prototype.setRegion = function (left, top, width, height) {\n  if (top < 0 || left < 0) {\n    throw \"Left and top must be nonnegative\";\n  }\n\n  if (height < 1 || width < 1) {\n    throw \"Height and width must be at least 1\";\n  }\n\n  var right = left + width;\n  var bottom = top + height;\n\n  if (bottom > this.height || right > this.width) {\n    throw \"The region must fit inside the matrix\";\n  }\n\n  for (var y = top; y < bottom; y++) {\n    var offset = y * this.rowSize;\n\n    for (var x = left; x < right; x++) {\n      this.bits[offset + (x >> 5)] |= 1 << (x & 0x1f);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}