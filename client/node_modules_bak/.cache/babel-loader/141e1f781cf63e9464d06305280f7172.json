{"ast":null,"code":"'use strict'; // Gets all non-builtin properties up the prototype chain\n\nvar _slicedToArray = require(\"/Users/petrhoskovec/Desktop/code/Charlie2.0-renew/Charlie2.0/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst getAllProperties = object => {\n  const props = new Set();\n\n  do {\n    for (const key of Reflect.ownKeys(object)) {\n      props.add([object, key]);\n    }\n  } while ((object = Reflect.getPrototypeOf(object)) && object !== Object.prototype);\n\n  return props;\n};\n\nmodule.exports = (self, options) => {\n  options = Object.assign({}, options);\n\n  const filter = key => {\n    const match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);\n\n    if (options.include) {\n      return options.include.some(match);\n    }\n\n    if (options.exclude) {\n      return !options.exclude.some(match);\n    }\n\n    return true;\n  };\n\n  for (const _ref of getAllProperties(self.constructor.prototype)) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    const object = _ref2[0];\n    const key = _ref2[1];\n\n    if (key === 'constructor' || !filter(key)) {\n      continue;\n    }\n\n    const descriptor = Reflect.getOwnPropertyDescriptor(object, key);\n\n    if (descriptor && typeof descriptor.value === 'function') {\n      self[key] = self[key].bind(self);\n    }\n  }\n\n  return self;\n};\n\nconst excludedReactMethods = ['componentWillMount', 'UNSAFE_componentWillMount', 'render', 'getSnapshotBeforeUpdate', 'componentDidMount', 'componentWillReceiveProps', 'UNSAFE_componentWillReceiveProps', 'shouldComponentUpdate', 'componentWillUpdate', 'UNSAFE_componentWillUpdate', 'componentDidUpdate', 'componentWillUnmount', 'componentDidCatch', 'setState', 'forceUpdate'];\n\nmodule.exports.react = (self, options) => {\n  options = Object.assign({}, options);\n  options.exclude = (options.exclude || []).concat(excludedReactMethods);\n  return module.exports(self, options);\n};","map":null,"metadata":{},"sourceType":"script"}