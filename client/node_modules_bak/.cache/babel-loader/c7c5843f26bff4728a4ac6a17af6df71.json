{"ast":null,"code":"import _slicedToArray from \"/Users/petrhoskovec/Desktop/code/Charlie2.0-renew/Charlie2.0/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/petrhoskovec/Desktop/code/Charlie2.0-renew/Charlie2.0/client/src/Molecules/map/DrawerWrap.js\";\n// import React, {useState, useEffect} from \"react\";\n// import ReactDOM from \"react-dom\";\n// import Container from \"@material-ui/core/Container\";\n// import Grid from \"@material-ui/core/Grid\";\n// import Paper from \"@material-ui/core/Paper\";\n// import Typography from \"@material-ui/core/Typography\";\n// import Drawer from '@material-ui/core/Drawer';\n// import { makeStyles } from \"@material-ui/core/styles\";\n// import { UserContext } from \"src/userContext\";\n// const DrawerWrap = ({open, event}) => {\n//   const classes = useStyles();\n//   const [openState, setOpenState] = useState(false)\n//   useEffect(() => {\n//     if(open){\n//       setOpenState(true)\n//     }else{\n//       setOpenState(false)\n//     }\n//   }, [open])\n//   return(\n//     <>\n//       <Drawer anchor={\"left\"} open={openState} onClose={() => setOpenState(!openState)}>\n//       Event Info\n//     </Drawer>\n//     </>\n//   )\n// };\nimport React, { useState, useContext, useEffect } from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Drawer from '@material-ui/core/Drawer';\nimport Typography from \"@material-ui/core/Typography\";\nimport { withRouter, useHistory, NavLink } from \"react-router-dom\";\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\nimport Gallery from \"react-grid-gallery\";\nimport { displayDate } from \"src/Services/transform-services\";\nimport { UserContext } from \"src/userContext\";\nimport PlayPageList from \"src/Molecules/play/PlayPageList\";\nimport PlayPageGallery from \"src/Molecules/play/PlayPageGallery\";\nimport PlayPageMap from \"src/Molecules/play/PlayPageMap\";\nimport { GET_ONE_EVENT } from \"src/Services/GQL/GET_ONE_EVENT\";\nimport { EVENT_RATINGS } from \"src/Services/GQL/EVENT_RATINGS\";\nimport EventButtons from \"src/Molecules/event/EventButtons\";\nimport RatingCard from \"src/Molecules/rating-card\";\nimport Spinner from \"src/Atoms/Spinner\";\nlet dataMock;\n\nfunction DrawerWrap(props) {\n  console.log(\"DrawerWrap props: \", props);\n  const classes = useStyles(); // let history = useHistory();\n\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        windowHeight = _useState2[0],\n        setWindowHeight = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        openState = _useState4[0],\n        setOpenState = _useState4[1];\n\n  const _useQuery = useQuery(GET_ONE_EVENT, {\n    variables: {\n      event_id: props.event._id\n    }\n  }),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data,\n        refetch = _useQuery.refetch;\n\n  const ratings = useQuery(EVENT_RATINGS, {\n    variables: {\n      event_id: props.event._id\n    }\n  });\n  useEffect(() => {\n    if (props.open) {\n      setOpenState(true);\n    } else {\n      setOpenState(false);\n    }\n  }, [props.open]);\n  console.log(\"DrawerWrap print context:\", props.context);\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    setWindowHeight(window.innerHeight);\n  }, []);\n  let dataDB;\n\n  const PaperEvent = props => {\n    return React.createElement(Paper, {\n      className: classes.paper,\n      style: {\n        height: 1 * windowHeight,\n        width: 400,\n        maxWidth: '86vw'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, props.children);\n  };\n\n  if (dataMock) {\n    dataDB = dataMock;\n  } else if (data) {\n    dataDB = data;\n  }\n\n  if (dataDB && dataDB.getOneEvent.success) {\n    return React.createElement(Drawer, {\n      anchor: \"left\",\n      open: openState,\n      onClose: () => setOpenState(!openState),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"paper_scrollable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(PaperEvent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      className: classes.nameGrid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, dataDB.getOneEvent.hide && React.createElement(Typography, {\n      component: \"h3\",\n      variant: \"h3\",\n      className: classes.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"CANCELLED\")), React.createElement(PlayPageGallery, {\n      event: dataDB.getOneEvent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(PlayPageList, {\n      event: dataDB.getOneEvent,\n      propContext: props.context,\n      bookings: dataDB.getOneEvent.bookings,\n      GQL_refetch: GET_ONE_EVENT,\n      refetchVariables: {\n        id: props.event._id\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      alignItems: \"center\",\n      alignContent: \"center\",\n      direction: \"column\",\n      className: classes.ratingContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, ratings.data && ratings.data.showRatings.map((rating, index) => React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(RatingCard, {\n      rating: rating,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    })))), React.createElement(EventButtons, {\n      event: dataDB && dataDB.getOneEvent,\n      propContext: props.context,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    })))));\n  }\n\n  if (dataDB && dataDB.getOneEvent.success == false) {\n    return React.createElement(Drawer, {\n      anchor: \"left\",\n      open: openState,\n      onClose: () => setOpenState(!openState),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(PaperEvent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: () => {// history.goBack();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"Back\"), React.createElement(Paper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      component: \"div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, dataDB.getOneEvent.message))));\n  }\n\n  return React.createElement(Drawer, {\n    anchor: \"left\",\n    open: openState,\n    onClose: () => setOpenState(!openState),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(PaperEvent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    style: {\n      width: \"100%\",\n      height: 300\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(Spinner, {\n    height: 100,\n    width: 100,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  })))));\n  ;\n}\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    background: \"#242323\",\n    color: \"white\",\n    overflow: \"scroll\",\n    borderRadius: 0 // borderBottomRightRadius: 0,\n    // borderBottomLeftRadius: 0\n\n  },\n  gridButtons: {\n    background: \"black\",\n    color: \"white\",\n    marginTop: \"0 !important\",\n    //padding: theme.spacing(3, 2),\n    display: \"flex\",\n    //width: 300,\n    overflow: \"scroll\",\n    borderBottomRightRadius: 5,\n    borderBottomLeftRadius: 5,\n    boxShadow: \"0px -2px 5px 0px rgba(200,200,200,0.3)\"\n  },\n  closeButton: {\n    background: theme.palette.violetova,\n    color: \"white\"\n  },\n  nameGrid: {\n    margin: 15\n  },\n  name: {\n    textAlign: \"center\"\n  },\n  ratingContainer: {\n    width: \"100%\",\n    overflow: \"scroll\"\n  }\n}));\nexport default DrawerWrap;","map":{"version":3,"sources":["/Users/petrhoskovec/Desktop/code/Charlie2.0-renew/Charlie2.0/client/src/Molecules/map/DrawerWrap.js"],"names":["React","useState","useContext","useEffect","CssBaseline","makeStyles","useTheme","Button","Container","Grid","Paper","Drawer","Typography","withRouter","useHistory","NavLink","useMutation","useQuery","Gallery","displayDate","UserContext","PlayPageList","PlayPageGallery","PlayPageMap","GET_ONE_EVENT","EVENT_RATINGS","EventButtons","RatingCard","Spinner","dataMock","DrawerWrap","props","console","log","classes","useStyles","windowHeight","setWindowHeight","openState","setOpenState","variables","event_id","event","_id","loading","error","data","refetch","ratings","open","context","window","scrollTo","innerHeight","dataDB","PaperEvent","paper","height","width","maxWidth","children","getOneEvent","success","nameGrid","hide","name","bookings","id","ratingContainer","showRatings","map","rating","index","message","theme","background","color","overflow","borderRadius","gridButtons","marginTop","display","borderBottomRightRadius","borderBottomLeftRadius","boxShadow","closeButton","palette","violetova","margin","textAlign"],"mappings":"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","sourcesContent":["// import React, {useState, useEffect} from \"react\";\n// import ReactDOM from \"react-dom\";\n\n// import Container from \"@material-ui/core/Container\";\n// import Grid from \"@material-ui/core/Grid\";\n// import Paper from \"@material-ui/core/Paper\";\n// import Typography from \"@material-ui/core/Typography\";\n// import Drawer from '@material-ui/core/Drawer';\n\n// import { makeStyles } from \"@material-ui/core/styles\";\n// import { UserContext } from \"src/userContext\";\n\n// const DrawerWrap = ({open, event}) => {\n//   const classes = useStyles();\n//   const [openState, setOpenState] = useState(false)\n\n//   useEffect(() => {\n//     if(open){\n//       setOpenState(true)\n//     }else{\n//       setOpenState(false)\n//     }\n//   }, [open])\n\n\n\n//   return(\n//     <>\n//       <Drawer anchor={\"left\"} open={openState} onClose={() => setOpenState(!openState)}>\n//       Event Info\n//     </Drawer>\n//     </>\n//   )\n// };\n\n\nimport React, { useState, useContext, useEffect } from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Drawer from '@material-ui/core/Drawer';\nimport Typography from \"@material-ui/core/Typography\";\n\nimport { withRouter, useHistory, NavLink } from \"react-router-dom\";\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\nimport Gallery from \"react-grid-gallery\";\nimport { displayDate } from \"src/Services/transform-services\";\n\nimport { UserContext } from \"src/userContext\";\n\nimport PlayPageList from \"src/Molecules/play/PlayPageList\";\nimport PlayPageGallery from \"src/Molecules/play/PlayPageGallery\";\nimport PlayPageMap from \"src/Molecules/play/PlayPageMap\";\n\nimport {GET_ONE_EVENT} from \"src/Services/GQL/GET_ONE_EVENT\";\nimport { EVENT_RATINGS } from \"src/Services/GQL/EVENT_RATINGS\";\nimport EventButtons from \"src/Molecules/event/EventButtons\";\nimport RatingCard from \"src/Molecules/rating-card\";\nimport Spinner from \"src/Atoms/Spinner\";\n\n\nlet dataMock;\n\nfunction DrawerWrap(props) {\n\n  console.log(\"DrawerWrap props: \", props)\n  const classes = useStyles();\n  // let history = useHistory();\n  const [windowHeight, setWindowHeight] = useState(0);\n  const [openState, setOpenState] = useState(false)\n  const { loading, error, data, refetch } = useQuery(GET_ONE_EVENT, {\n    variables: { event_id: props.event._id }\n  });\n  const ratings = useQuery(EVENT_RATINGS, {\n    variables: { event_id: props.event._id }\n  });\n\n  useEffect(() => {\n    if(props.open){\n      setOpenState(true)\n    }else{\n      setOpenState(false)\n    }\n  }, [props.open])\n\n\n  console.log(\"DrawerWrap print context:\", props.context)\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    setWindowHeight(window.innerHeight)\n  }, []);\n\n  let dataDB;\n\n  const PaperEvent = props => {\n    return <Paper \n                  className={classes.paper}\n                  style={{height: 1 * windowHeight, width: 400, maxWidth: '86vw'}}\n                  >\n              {props.children}\n          </Paper>;\n  };\n\n\n  if (dataMock) {\n    dataDB = dataMock;\n  } else if (data) {\n    dataDB = data;\n  }\n\n\n  if (dataDB && dataDB.getOneEvent.success) {\n    return (\n      <Drawer anchor={\"left\"} open={openState} onClose={() => setOpenState(!openState)}>\n        <div id=\"paper_scrollable\">\n          <PaperEvent>\n            <Grid\n              container\n              justify=\"center\"\n            >\n              <Grid item className={classes.nameGrid}>\n                {dataDB.getOneEvent.hide && <Typography component=\"h3\" variant=\"h3\" className={classes.name}>\n                  CANCELLED\n                </Typography>}\n              </Grid>\n              <PlayPageGallery event={dataDB.getOneEvent} />\n              <PlayPageList\n                    event={dataDB.getOneEvent}\n                    propContext={props.context}\n                    bookings={dataDB.getOneEvent.bookings}\n                    GQL_refetch={GET_ONE_EVENT}\n                    refetchVariables={{ id: props.event._id }}\n                  />\n              {/* <PlayPageMap\n                    event={dataDB.getOneEvent}\n                    showBookings={dataDB.getOneEvent.bookings} //showBookings\n                  />  */}\n\n              <Grid\n                container\n                justify=\"center\"\n                alignItems=\"center\"\n                alignContent=\"center\"\n                direction=\"column\"\n                className={classes.ratingContainer}\n              >\n                {ratings.data &&\n                  ratings.data.showRatings.map((rating, index) => (\n                    <Grid item>\n                      <RatingCard rating={rating} key={index} />\n                    </Grid>\n                  ))}\n              </Grid>\n              <EventButtons\n                event={dataDB && dataDB.getOneEvent}\n                propContext={props.context}\n              />\n            </Grid>\n          </PaperEvent>\n        </div>\n        </Drawer>\n    );\n  }\n  if (dataDB && dataDB.getOneEvent.success == false) {\n    return (\n      <Drawer anchor={\"left\"} open={openState} onClose={() => setOpenState(!openState)}>\n\n        <PaperEvent>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              // history.goBack();\n            }}\n          >\n            Back\n          </Button>\n          <Paper>\n            <Typography component=\"div\">\n              {dataDB.getOneEvent.message}\n            </Typography>\n          </Paper>\n        </PaperEvent>\n        </ Drawer>\n    );\n  }\n  return(\n    <Drawer anchor={\"left\"} open={openState} onClose={() => setOpenState(!openState)}>\n\n      <PaperEvent>\n          <Grid container justify=\"center\" alignItems=\"center\" style={{width: \"100%\", height: 300}}>\n            <Grid item>\n              <Spinner height={100} width={100} />\n            </Grid>\n          </Grid>\n      </PaperEvent>\n    </ Drawer>\n  );;\n}\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    background: \"#242323\",\n    color: \"white\",\n    overflow: \"scroll\",\n    borderRadius: 0,\n    // borderBottomRightRadius: 0,\n    // borderBottomLeftRadius: 0\n  },\n  gridButtons: {\n    background: \"black\",\n    color: \"white\",\n    marginTop: \"0 !important\",\n    //padding: theme.spacing(3, 2),\n    display: \"flex\",\n    //width: 300,\n    overflow: \"scroll\",\n    borderBottomRightRadius: 5,\n    borderBottomLeftRadius: 5,\n    boxShadow: \"0px -2px 5px 0px rgba(200,200,200,0.3)\"\n  },\n  closeButton: {\n    background: theme.palette.violetova,\n    color: \"white\"\n  },\n  nameGrid: {\n    margin: 15\n  },\n  name: {\n    textAlign: \"center\"\n  },\n  ratingContainer: {\n    width: \"100%\",\n    overflow: \"scroll\"\n  },\n}));\n\nexport default DrawerWrap;\n"]},"metadata":{},"sourceType":"module"}