{"ast":null,"code":"import _slicedToArray from \"/Users/petrhoskovec/Desktop/code/Charlie2.0/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/petrhoskovec/Desktop/code/Charlie2.0/client/src/Atoms/Play/Dropzone_QR.js\";\nimport React, { useState, useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport CropFreeIcon from '@material-ui/icons/CropFree';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport QrCode from 'qrcode-reader';\nimport Spinner from \"src/Atoms/Spinner\";\n\nvar Instascan = require('instascan');\n\nfunction MyDropzone({\n  setQrCodeData\n}) {\n  const classes = useStyles();\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isUploading = _useState2[0],\n        setIsUploading = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loadedImage = _useState4[0],\n        setLoadedImage = _useState4[1];\n\n  const onDrop = useCallback(acceptedFiles => {\n    setIsUploading(true);\n    acceptedFiles.map(file => {\n      console.log(\"DROP FILE: \", file);\n      var reader = new FileReader();\n\n      reader.onload = function (input) {\n        setLoadedImage(input.target.result);\n        console.log(\"INPUT: \", input);\n        var qr = new QrCode();\n\n        qr.callback = function (err, value) {\n          if (err) {\n            console.error(err);\n            setQrCodeData(\"We could not read this\");\n            setIsUploading(false);\n          }\n\n          if (value) {\n            console.log(\"XX+: \", value);\n            setIsUploading(false);\n            setQrCodeData(value.result);\n            const image = new Image();\n\n            image.onload = () => {\n              const width = image.naturalWidth;\n              const height = image.naturalHeight;\n              console.log(\"NATTY: \", width, height);\n              const ratio = height / 200;\n              const sqSize = value.points[0].estimatedModuleSize / ratio;\n              console.log(\"NATTY ratio: \", ratio);\n              console.log(\"Point x, y+: \", value.points[2].x / ratio, value.points[2].y / ratio);\n              var canvas = document.getElementById(\"qr_canvas\");\n              canvas.height = image.naturalHeight / ratio;\n              canvas.width = image.naturalWidth / ratio;\n              var ctx = canvas.getContext(\"2d\");\n              ctx.beginPath();\n              ctx.lineWidth = \"3\";\n              ctx.strokeStyle = \"#E8045D\";\n              ctx.rect(value.points[1].x / ratio - sqSize / 2, value.points[1].y / ratio - sqSize / 2, sqSize, sqSize);\n              ctx.stroke();\n              ctx.beginPath();\n              ctx.lineWidth = \"3\";\n              ctx.strokeStyle = \"#E8045D\";\n              ctx.rect(value.points[0].x / ratio - sqSize / 2, value.points[0].y / ratio - sqSize / 2, sqSize, sqSize);\n              ctx.stroke();\n              ctx.beginPath();\n              ctx.lineWidth = \"3\";\n              ctx.strokeStyle = \"#E8045D\";\n              ctx.rect(value.points[2].x / ratio - sqSize / 2, value.points[2].y / ratio - sqSize / 2, sqSize, sqSize);\n              ctx.stroke();\n            };\n\n            image.src = input.target.result;\n          }\n        };\n\n        qr.decode(input.target.result);\n      };\n\n      reader.readAsDataURL(file); // var barcodeDetector = new BarcodeDetector();\n      // let id = devices.filter((device) => device.kind === \"videoinput\").slice(-1).pop().deviceId;\n      // let constrains = {video: {optional: [{sourceId: id }]}};\n      // navigator.mediaDevices.getUserMedia({}).then((stream) => {\n      //   console.log(\"stream: \", stream)\n      //   document.getElementById('preview').src = stream;\n      // })\n    });\n  }, []); // var scanner = new Instascan.Scanner({ video: document.getElementById('preview') });\n  // scanner.addListener('scan', function (content, image) {\n  //   console.log(content);\n  // });\n  // Instascan.Camera.getCameras().then(function (cameras) {\n  //   if (cameras.length > 0) {\n  //     scanner.start(cameras[0]);\n  //   }\n  // });\n\n  const _useDropzone = useDropzone({\n    onDrop\n  }),\n        getRootProps = _useDropzone.getRootProps,\n        getInputProps = _useDropzone.getInputProps,\n        isDragActive = _useDropzone.isDragActive;\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", Object.assign({}, getRootProps(), {\n    style: {\n      outline: \"none\",\n      cursor: \"pointer\",\n      border: \"1px dashed grey\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, isUploading ? React.createElement(Spinner, {\n    height: 100,\n    width: 100,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }) : loadedImage ? React.createElement(\"img\", {\n    src: loadedImage,\n    alt: \"No Image\",\n    className: classes.qrImage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }) : React.createElement(CropFreeIcon, {\n    fontSize: \"large\",\n    className: classes.uploadIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }), loadedImage && React.createElement(\"div\", {\n    className: classes.canvasWrap,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(\"canvas\", {\n    id: \"qr_canvas\",\n    className: classes.canvas,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"canvas\"))))));\n}\n\nconst useStyles = makeStyles(theme => ({\n  uploadIcon: {\n    margin: 20,\n    \"&:hover\": {\n      cursor: \"pointer\"\n    }\n  },\n  qrImage: {\n    height: 200\n  },\n  canvasWrap: {\n    height: 0,\n    top: -207,\n    position: \"relative\"\n  },\n  canvas: {\n    zIndex: 100,\n    // height: 200,\n    // width: 276,\n    position: \"relative\" // border: \"1px solid green\"\n\n  }\n}));\nexport default MyDropzone;","map":{"version":3,"sources":["/Users/petrhoskovec/Desktop/code/Charlie2.0/client/src/Atoms/Play/Dropzone_QR.js"],"names":["React","useState","useCallback","useDropzone","CropFreeIcon","makeStyles","Grid","QrCode","Spinner","Instascan","require","MyDropzone","setQrCodeData","classes","useStyles","isUploading","setIsUploading","loadedImage","setLoadedImage","onDrop","acceptedFiles","map","file","console","log","reader","FileReader","onload","input","target","result","qr","callback","err","value","error","image","Image","width","naturalWidth","height","naturalHeight","ratio","sqSize","points","estimatedModuleSize","x","y","canvas","document","getElementById","ctx","getContext","beginPath","lineWidth","strokeStyle","rect","stroke","src","decode","readAsDataURL","getRootProps","getInputProps","isDragActive","outline","cursor","border","qrImage","uploadIcon","canvasWrap","theme","margin","top","position","zIndex"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport CropFreeIcon from '@material-ui/icons/CropFree';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport QrCode from 'qrcode-reader';\n\nimport Spinner from \"src/Atoms/Spinner\";\n\nvar Instascan = require('instascan');\n\nfunction MyDropzone({setQrCodeData}) {\n  const classes = useStyles();\n  const [isUploading, setIsUploading] = useState(false);\n  const [loadedImage, setLoadedImage] = useState(null);\n  const onDrop = useCallback(acceptedFiles => {\n\n    setIsUploading(true);\n\n    acceptedFiles.map(file => {\n      console.log(\"DROP FILE: \", file)\n      var reader = new FileReader();\n      reader.onload = function(input) {\n        setLoadedImage(input.target.result);\n  \n        console.log(\"INPUT: \", input)\n              var qr = new QrCode();\n              qr.callback = function(err, value) {\n                  if (err) {\n                      console.error(err);\n                      setQrCodeData(\"We could not read this\")\n                      setIsUploading(false)\n                  }\n                  if(value){\n                    console.log(\"XX+: \", value);\n\n                    setIsUploading(false)\n                    setQrCodeData(value.result) \n\n                    const image = new Image;\n                    image.onload = () => {\n                        const width = image.naturalWidth;\n                        const height = image.naturalHeight;\n                        console.log(\"NATTY: \", width, height)\n                        const ratio = height/200;\n                        const sqSize = value.points[0].estimatedModuleSize/ratio\n                        console.log(\"NATTY ratio: \", ratio)\n                        console.log(\"Point x, y+: \", (value.points[2].x/ratio), (value.points[2].y/ratio));\n\n                        var canvas = document.getElementById(\"qr_canvas\");\n                        canvas.height = image.naturalHeight/ratio\n                        canvas.width = image.naturalWidth/ratio\n                        var ctx = canvas.getContext(\"2d\");\n                        ctx.beginPath();\n                        ctx.lineWidth = \"3\";\n                        ctx.strokeStyle = \"#E8045D\";\n                        ctx.rect((value.points[1].x/ratio - sqSize/2), (value.points[1].y/ratio - sqSize/2), sqSize, sqSize);\n                        ctx.stroke(); \n\n                        ctx.beginPath();\n                        ctx.lineWidth = \"3\";\n                        ctx.strokeStyle = \"#E8045D\";\n                        ctx.rect((value.points[0].x/ratio - sqSize/2), (value.points[0].y/ratio - sqSize/2), sqSize, sqSize);\n                        ctx.stroke(); \n\n                        ctx.beginPath();\n                        ctx.lineWidth = \"3\";\n                        ctx.strokeStyle = \"#E8045D\";\n                        ctx.rect((value.points[2].x/ratio - sqSize/2), (value.points[2].y/ratio - sqSize/2), sqSize, sqSize);\n                        ctx.stroke(); \n\n                    }\n                    image.src =  input.target.result\n\n                  }\n              };\n              qr.decode(input.target.result);\n      }\n\n      reader.readAsDataURL(file);\n\n      // var barcodeDetector = new BarcodeDetector();\n\n      // let id = devices.filter((device) => device.kind === \"videoinput\").slice(-1).pop().deviceId;\n      // let constrains = {video: {optional: [{sourceId: id }]}};\n\n      // navigator.mediaDevices.getUserMedia({}).then((stream) => {\n      //   console.log(\"stream: \", stream)\n      //   document.getElementById('preview').src = stream;\n      // })\n    });\n  }, []);\n\n  // var scanner = new Instascan.Scanner({ video: document.getElementById('preview') });\n  // scanner.addListener('scan', function (content, image) {\n  //   console.log(content);\n  // });\n\n  // Instascan.Camera.getCameras().then(function (cameras) {\n  //   if (cameras.length > 0) {\n  //     scanner.start(cameras[0]);\n  //   }\n  // });\n\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  return (\n    <>\n      <div\n        {...getRootProps()}\n        style={{\n          outline: \"none\",\n          cursor: \"pointer\",\n          border: \"1px dashed grey\"\n        }}\n      >\n        <input {...getInputProps()} />\n        <Grid container justify=\"center\">\n          <Grid item>\n          {/* {isDragActive ? (\n            <>\n              <WallpaperIcon fontSize=\"large\" className={classes.uploadIcon} />\n            </>\n          ) : (\n            <>\n              <WallpaperIcon fontSize=\"large\" className={classes.uploadIcon} />\n            </>\n          )} */}\n           {isUploading ? <Spinner height={100} width={100} /> \n                : loadedImage ? <img src={loadedImage} alt=\"No Image\" className={classes.qrImage} /> : <CropFreeIcon fontSize=\"large\" className={classes.uploadIcon} />}\n           {loadedImage && <div className={classes.canvasWrap}>\n                              <canvas id=\"qr_canvas\" className={classes.canvas}> \n                                canvas \n                              </canvas>\n                            </div>}\n          </ Grid>\n        </ Grid>\n      </div>\n    </>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  uploadIcon: {\n    margin: 20,\n    \"&:hover\": {\n      cursor: \"pointer\"\n    }\n  },\n  qrImage:{\n    height: 200,\n  },\n  canvasWrap: {\n    height: 0,\n    top:  -207,\n    position: \"relative\"\n  },\n  canvas: {\n    zIndex: 100,\n    // height: 200,\n    // width: 276,\n    position: \"relative\",\n    // border: \"1px solid green\"\n  }\n}));\n\nexport default MyDropzone;\n"]},"metadata":{},"sourceType":"module"}