{"ast":null,"code":"import { __extends, __rest, __assign } from 'tslib';\nimport { ApolloLink, fromError, Observable } from 'apollo-link';\nimport { checkFetcher, selectURI, selectHttpOptionsAndBody, fallbackHttpConfig, serializeFetchParameter, createSignalIfSupported, parseAndCheckHttpResponse } from 'apollo-link-http-common';\nimport { BatchLink } from 'apollo-link-batch';\n\nvar BatchHttpLink = function (_super) {\n  __extends(BatchHttpLink, _super);\n\n  function BatchHttpLink(fetchParams) {\n    var _this = _super.call(this) || this;\n\n    var _a = fetchParams || {},\n        _b = _a.uri,\n        uri = _b === void 0 ? '/graphql' : _b,\n        fetcher = _a.fetch,\n        includeExtensions = _a.includeExtensions,\n        batchInterval = _a.batchInterval,\n        batchMax = _a.batchMax,\n        batchKey = _a.batchKey,\n        requestOptions = __rest(_a, [\"uri\", \"fetch\", \"includeExtensions\", \"batchInterval\", \"batchMax\", \"batchKey\"]);\n\n    checkFetcher(fetcher);\n\n    if (!fetcher) {\n      fetcher = fetch;\n    }\n\n    var linkConfig = {\n      http: {\n        includeExtensions: includeExtensions\n      },\n      options: requestOptions.fetchOptions,\n      credentials: requestOptions.credentials,\n      headers: requestOptions.headers\n    };\n    _this.batchInterval = batchInterval || 10;\n    _this.batchMax = batchMax || 10;\n\n    var batchHandler = function (operations) {\n      var chosenURI = selectURI(operations[0], uri);\n      var context = operations[0].getContext();\n      var clientAwarenessHeaders = {};\n\n      if (context.clientAwareness) {\n        var _a = context.clientAwareness,\n            name_1 = _a.name,\n            version = _a.version;\n\n        if (name_1) {\n          clientAwarenessHeaders['apollographql-client-name'] = name_1;\n        }\n\n        if (version) {\n          clientAwarenessHeaders['apollographql-client-version'] = version;\n        }\n      }\n\n      var contextConfig = {\n        http: context.http,\n        options: context.fetchOptions,\n        credentials: context.credentials,\n        headers: __assign({}, clientAwarenessHeaders, context.headers)\n      };\n      var optsAndBody = operations.map(function (operation) {\n        return selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig);\n      });\n      var loadedBody = optsAndBody.map(function (_a) {\n        var body = _a.body;\n        return body;\n      });\n      var options = optsAndBody[0].options;\n\n      if (options.method === 'GET') {\n        return fromError(new Error('apollo-link-batch-http does not support GET requests'));\n      }\n\n      try {\n        options.body = serializeFetchParameter(loadedBody, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n\n      var controller;\n\n      if (!options.signal) {\n        var _b = createSignalIfSupported(),\n            _controller = _b.controller,\n            signal = _b.signal;\n\n        controller = _controller;\n        if (controller) options.signal = signal;\n      }\n\n      return new Observable(function (observer) {\n        fetcher(chosenURI, options).then(function (response) {\n          operations.forEach(function (operation) {\n            return operation.setContext({\n              response: response\n            });\n          });\n          return response;\n        }).then(parseAndCheckHttpResponse(operations)).then(function (result) {\n          observer.next(result);\n          observer.complete();\n          return result;\n        }).catch(function (err) {\n          if (err.name === 'AbortError') return;\n\n          if (err.result && err.result.errors && err.result.data) {\n            observer.next(err.result);\n          }\n\n          observer.error(err);\n        });\n        return function () {\n          if (controller) controller.abort();\n        };\n      });\n    };\n\n    batchKey = batchKey || function (operation) {\n      var context = operation.getContext();\n      var contextConfig = {\n        http: context.http,\n        options: context.fetchOptions,\n        credentials: context.credentials,\n        headers: context.headers\n      };\n      return selectURI(operation, uri) + JSON.stringify(contextConfig);\n    };\n\n    _this.batcher = new BatchLink({\n      batchInterval: _this.batchInterval,\n      batchMax: _this.batchMax,\n      batchKey: batchKey,\n      batchHandler: batchHandler\n    });\n    return _this;\n  }\n\n  BatchHttpLink.prototype.request = function (operation) {\n    return this.batcher.request(operation);\n  };\n\n  return BatchHttpLink;\n}(ApolloLink);\n\nexport { BatchHttpLink };","map":null,"metadata":{},"sourceType":"module"}