{"ast":null,"code":"import _defineProperty from \"/Users/petrhoskovec/Desktop/code/Charlie2.0/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/petrhoskovec/Desktop/code/Charlie2.0/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/petrhoskovec/Desktop/code/Charlie2.0/client/src/Molecules/Dropzone.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport Gallery from \"react-grid-gallery\";\nimport request from \"superagent\";\nimport WallpaperIcon from \"@material-ui/icons/Wallpaper\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Spinner from \"src/Atoms/Spinner\"; // const CLOUDINARY_UPLOAD_PRESET = \"simple-preset-1\";\n\nconst CLOUDINARY_UPLOAD_PRESET = \"simpl_pst\"; // const CLOUDINARY_UPLOAD_URL =\n//   \"https://api.cloudinary.com/v1_1/party-images-app/upload\"; \n\nconst CLOUDINARY_UPLOAD_URL = \"https://api.cloudinary.com/v1_1/dkyt8girl/upload\";\nlet smallfile;\n\nfunction MyDropzone({\n  setFormValue,\n  setCountOfFiles\n}) {\n  const classes = useStyles();\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isUploading = _useState2[0],\n        setIsUploading = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        uploadedFiles = _useState4[0],\n        setUploadedFiles = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        display = _useState6[0],\n        setDisplay = _useState6[1];\n\n  const onDrop = useCallback(acceptedFiles => {\n    // Do something with the files\n    setIsUploading(true);\n    let count = 0;\n    acceptedFiles.map(file => {\n      handleImageUpload(file);\n      count = count + 1;\n    });\n    setCountOfFiles(count);\n  }, []);\n\n  const _useDropzone = useDropzone({\n    onDrop\n  }),\n        getRootProps = _useDropzone.getRootProps,\n        getInputProps = _useDropzone.getInputProps,\n        isDragActive = _useDropzone.isDragActive;\n\n  const handleImageUpload = file => {\n    const width = 350;\n    const height = 350;\n    const fileName = file.name;\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = event => {\n      const img = document.createElement(\"img\");\n      img.src = event.target.result;\n\n      img.onload = () => {\n        const elem = document.createElement(\"canvas\");\n        elem.width = width;\n        elem.height = height;\n        const ctx = elem.getContext(\"2d\"); // img.width and img.height will contain the original dimensions\n\n        ctx.drawImage(img, 0, 0, width, height);\n        ctx.canvas.toBlob(blob => {\n          smallfile = new File([blob], fileName, {\n            type: \"image/jpeg\",\n            lastModified: Date.now()\n          });\n          uploadingOneImg(smallfile, file);\n        }, \"image/jpeg\", 1);\n      };\n\n      reader.onerror = error => console.log(error);\n    };\n  };\n\n  const uploadingOneImg = (imgTumb, imgFull) => {\n    var urlTumb; //var divider;\n\n    var upload = request.post(CLOUDINARY_UPLOAD_URL).field(\"upload_preset\", CLOUDINARY_UPLOAD_PRESET).field(\"file\", imgTumb);\n    upload.end((err, response) => {\n      if (err) {\n        console.error(err);\n        window.alert(\"Problem with uploading your picture..\");\n      }\n\n      if (response.body.secure_url !== \"\") {\n        urlTumb = response.body.secure_url;\n      }\n\n      var upload2 = request.post(CLOUDINARY_UPLOAD_URL).field(\"upload_preset\", CLOUDINARY_UPLOAD_PRESET).field(\"file\", imgFull);\n      upload2.end((err, response) => {\n        if (err) {\n          window.alert(\"Problem with uploading your picture..\");\n        }\n\n        if (response.body.secure_url !== \"\") {\n          var uplArr = uploadedFiles;\n          uplArr.push({\n            src: response.body.secure_url,\n            thumbnail: urlTumb,\n            thumbnailWidth: response.body.width,\n            scaletwidth: 100,\n            thumbnailHeight: response.body.height,\n            isSelected: false,\n            caption: \"After Rain (Jeshu John - designerspics.com)\"\n          });\n          setUploadedFiles([...uplArr]);\n          setIsUploading(false);\n          setDisplay(true);\n          setFormValue(prevValues => {\n            return _objectSpread({}, prevValues, {\n              ImagesArr: uplArr\n            });\n          });\n        }\n      });\n    });\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", Object.assign({}, getRootProps(), {\n    style: {\n      outline: \"none\",\n      cursor: \"pointer\",\n      border: \"1px dashed grey\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  })), isDragActive ? React.createElement(React.Fragment, null, React.createElement(WallpaperIcon, {\n    fontSize: \"large\",\n    className: classes.uploadIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  })) : React.createElement(React.Fragment, null, React.createElement(WallpaperIcon, {\n    fontSize: \"large\",\n    className: classes.uploadIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  })), display ? React.createElement(Gallery, {\n    images: uploadedFiles,\n    rowHeight: 100,\n    display: display,\n    backdropClosesModal: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }) : React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \" \"), display ? React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, \" \") : React.createElement(Gallery, {\n    images: uploadedFiles,\n    rowHeight: 100,\n    display: display,\n    backdropClosesModal: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  })));\n}\n\nconst useStyles = makeStyles(theme => ({\n  uploadIcon: {\n    margin: 20,\n    \"&:hover\": {\n      cursor: \"pointer\"\n    }\n  }\n}));\nexport default MyDropzone;","map":{"version":3,"sources":["/Users/petrhoskovec/Desktop/code/Charlie2.0/client/src/Molecules/Dropzone.js"],"names":["React","useState","useCallback","useDropzone","Gallery","request","WallpaperIcon","makeStyles","Spinner","CLOUDINARY_UPLOAD_PRESET","CLOUDINARY_UPLOAD_URL","smallfile","MyDropzone","setFormValue","setCountOfFiles","classes","useStyles","isUploading","setIsUploading","uploadedFiles","setUploadedFiles","display","setDisplay","onDrop","acceptedFiles","count","map","file","handleImageUpload","getRootProps","getInputProps","isDragActive","width","height","fileName","name","reader","FileReader","readAsDataURL","onload","event","img","document","createElement","src","target","result","elem","ctx","getContext","drawImage","canvas","toBlob","blob","File","type","lastModified","Date","now","uploadingOneImg","onerror","error","console","log","imgTumb","imgFull","urlTumb","upload","post","field","end","err","response","window","alert","body","secure_url","upload2","uplArr","push","thumbnail","thumbnailWidth","scaletwidth","thumbnailHeight","isSelected","caption","prevValues","ImagesArr","outline","cursor","border","uploadIcon","theme","margin"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport Gallery from \"react-grid-gallery\";\nimport request from \"superagent\";\nimport WallpaperIcon from \"@material-ui/icons/Wallpaper\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport Spinner from \"src/Atoms/Spinner\";\n\n// const CLOUDINARY_UPLOAD_PRESET = \"simple-preset-1\";\nconst CLOUDINARY_UPLOAD_PRESET = \"simpl_pst\"; \n// const CLOUDINARY_UPLOAD_URL =\n//   \"https://api.cloudinary.com/v1_1/party-images-app/upload\"; \nconst CLOUDINARY_UPLOAD_URL =\n  \"https://api.cloudinary.com/v1_1/dkyt8girl/upload\"; \nlet smallfile;\n\nfunction MyDropzone({setFormValue, setCountOfFiles}) {\n  const classes = useStyles();\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadedFiles, setUploadedFiles] = useState([]);\n  const [display, setDisplay] = useState(false);\n  const onDrop = useCallback(acceptedFiles => {\n    // Do something with the files\n\n    setIsUploading(true);\n  \n    let count = 0 \n    acceptedFiles.map(file => {\n      handleImageUpload(file);\n      count = count + 1\n    });\n    setCountOfFiles(count)\n  }, []);\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  const handleImageUpload = file => {\n    const width = 350;\n    const height = 350;\n    const fileName = file.name;\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = event => {\n      const img = document.createElement(\"img\");\n      img.src = event.target.result;\n\n      img.onload = () => {\n        const elem = document.createElement(\"canvas\");\n        elem.width = width;\n        elem.height = height;\n        const ctx = elem.getContext(\"2d\");\n        // img.width and img.height will contain the original dimensions\n        ctx.drawImage(img, 0, 0, width, height);\n        ctx.canvas.toBlob(\n          blob => {\n            smallfile = new File([blob], fileName, {\n              type: \"image/jpeg\",\n              lastModified: Date.now()\n            });\n            uploadingOneImg(smallfile, file);\n          },\n          \"image/jpeg\",\n          1\n        );\n      };\n      reader.onerror = error => console.log(error);\n    };\n  };\n\n  const uploadingOneImg = (imgTumb, imgFull) => {\n    var urlTumb;\n\n    //var divider;\n    var upload = request\n      .post(CLOUDINARY_UPLOAD_URL)\n      .field(\"upload_preset\", CLOUDINARY_UPLOAD_PRESET)\n      .field(\"file\", imgTumb);\n    upload.end((err, response) => {\n      if (err) {\n        console.error(err);\n        window.alert(\"Problem with uploading your picture..\");\n      }\n\n      if (response.body.secure_url !== \"\") {\n        urlTumb = response.body.secure_url;\n      }\n\n      var upload2 = request\n        .post(CLOUDINARY_UPLOAD_URL)\n        .field(\"upload_preset\", CLOUDINARY_UPLOAD_PRESET)\n        .field(\"file\", imgFull);\n      upload2.end((err, response) => {\n        if (err) {\n          window.alert(\"Problem with uploading your picture..\");\n        }\n        if (response.body.secure_url !== \"\") {\n          var uplArr = uploadedFiles;\n          uplArr.push({\n            src: response.body.secure_url,\n            thumbnail: urlTumb,\n            thumbnailWidth: response.body.width,\n            scaletwidth: 100,\n            thumbnailHeight: response.body.height,\n            isSelected: false,\n            caption: \"After Rain (Jeshu John - designerspics.com)\"\n          });\n\n          setUploadedFiles([...uplArr]);\n          setIsUploading(false);\n          setDisplay(true);\n          setFormValue(prevValues => {\n            return { ...prevValues, ImagesArr: uplArr };\n          });\n        }\n      });\n    });\n  };\n\n  return (\n    <>\n      <div\n        {...getRootProps()}\n        style={{\n          outline: \"none\",\n          cursor: \"pointer\",\n          border: \"1px dashed grey\"\n        }}\n      >\n        <input {...getInputProps()} />\n        {isDragActive ? (\n          <>\n            <WallpaperIcon fontSize=\"large\" className={classes.uploadIcon} />\n          </>\n        ) : (\n          <>\n            <WallpaperIcon fontSize=\"large\" className={classes.uploadIcon} />\n          </>\n        )}\n        {/* <p>Place HERE your pictures</p> */}\n\n        {/* {isUploading ? <Spinner height={100} width={100} /> : null} */}\n        {display ? (\n          <Gallery\n            images={uploadedFiles}\n            rowHeight={100}\n            display={display}\n            backdropClosesModal={true}\n          />\n        ) : (\n          <span> </span>\n        )}\n        {display ? (\n          <span> </span>\n        ) : (\n          <Gallery\n            images={uploadedFiles}\n            rowHeight={100}\n            display={display}\n            backdropClosesModal={true}\n          />\n        )}\n      </div>\n    </>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  uploadIcon: {\n    margin: 20,\n    \"&:hover\": {\n      cursor: \"pointer\"\n    }\n  }\n}));\n\nexport default MyDropzone;\n"]},"metadata":{},"sourceType":"module"}