{"ast":null,"code":"/*\n  Ported to JavaScript by Lazar Laszlo 2011\n\n  lazarsoft@gmail.com, www.lazarsoft.info\n\n*/\n\n/*\n*\n* Copyright 2007 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport ReedSolomonDecoder from './rsdecoder';\nimport GF256 from './gf256';\nimport BitMatrixParser from './bmparser';\nimport DataBlock from './datablock';\nimport QRCodeDataBlockReader from './databr';\nvar Decoder = {};\nDecoder.rsDecoder = new ReedSolomonDecoder(GF256.QR_CODE_FIELD);\n\nDecoder.correctErrors = function (codewordBytes, numDataCodewords) {\n  var numCodewords = codewordBytes.length; // First read into an array of ints\n\n  var codewordsInts = new Array(numCodewords);\n\n  for (var i = 0; i < numCodewords; i++) {\n    codewordsInts[i] = codewordBytes[i] & 0xFF;\n  }\n\n  var numECCodewords = codewordBytes.length - numDataCodewords;\n\n  try {\n    Decoder.rsDecoder.decode(codewordsInts, numECCodewords);\n  } catch (rse) {\n    throw rse;\n  } // Copy back into array of bytes -- only need to worry about the bytes that were data\n  // We don't care about errors in the error-correction codewords\n\n\n  for (var i = 0; i < numDataCodewords; i++) {\n    codewordBytes[i] = codewordsInts[i];\n  }\n};\n\nDecoder.decode = function (bits) {\n  var parser = new BitMatrixParser(bits);\n  var version = parser.readVersion();\n  var ecLevel = parser.readFormatInformation().errorCorrectionLevel; // Read codewords\n\n  var codewords = parser.readCodewords(); // Separate into data blocks\n\n  var dataBlocks = DataBlock.getDataBlocks(codewords, version, ecLevel); // Count total number of data bytes\n\n  var totalBytes = 0;\n\n  for (var i = 0; i < dataBlocks.length; i++) {\n    totalBytes += dataBlocks[i].numDataCodewords;\n  }\n\n  var resultBytes = new Array(totalBytes);\n  var resultOffset = 0; // Error-correct and copy data blocks together into a stream of bytes\n\n  for (var j = 0; j < dataBlocks.length; j++) {\n    var dataBlock = dataBlocks[j];\n    var codewordBytes = dataBlock.codewords;\n    var numDataCodewords = dataBlock.numDataCodewords;\n    Decoder.correctErrors(codewordBytes, numDataCodewords);\n\n    for (var i = 0; i < numDataCodewords; i++) {\n      resultBytes[resultOffset++] = codewordBytes[i];\n    }\n  } // Decode the contents of that stream of bytes\n\n\n  var reader = new QRCodeDataBlockReader(resultBytes, version.versionNumber, ecLevel.bits);\n  return reader;\n};\n\nexport default Decoder;","map":null,"metadata":{},"sourceType":"module"}