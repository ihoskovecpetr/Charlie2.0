{"ast":null,"code":"/*\n  Ported to JavaScript by Lazar Laszlo 2011\n\n  lazarsoft@gmail.com, www.lazarsoft.info\n\n*/\n\n/*\n*\n* Copyright 2007 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport { qrcode } from './qrcode';\nexport default function QRCodeDataBlockReader(blocks, version, numErrorCorrectionCode) {\n  this.blockPointer = 0;\n  this.bitPointer = 7;\n  this.dataLength = 0;\n  this.blocks = blocks;\n  this.numErrorCorrectionCode = numErrorCorrectionCode;\n  if (version <= 9) this.dataLengthMode = 0;else if (version >= 10 && version <= 26) this.dataLengthMode = 1;else if (version >= 27 && version <= 40) this.dataLengthMode = 2;\n}\n\nQRCodeDataBlockReader.prototype.getNextBits = function (numBits) {\n  var bits = 0;\n\n  if (numBits < this.bitPointer + 1) {\n    // next word fits into current data block\n    var mask = 0;\n\n    for (var i = 0; i < numBits; i++) {\n      mask += 1 << i;\n    }\n\n    mask <<= this.bitPointer - numBits + 1;\n    bits = (this.blocks[this.blockPointer] & mask) >> this.bitPointer - numBits + 1;\n    this.bitPointer -= numBits;\n    return bits;\n  } else if (numBits < this.bitPointer + 1 + 8) {\n    // next word crosses 2 data blocks\n    var mask1 = 0;\n\n    for (var i = 0; i < this.bitPointer + 1; i++) {\n      mask1 += 1 << i;\n    }\n\n    bits = (this.blocks[this.blockPointer] & mask1) << numBits - (this.bitPointer + 1);\n    this.blockPointer++;\n    bits += this.blocks[this.blockPointer] >> 8 - (numBits - (this.bitPointer + 1));\n    this.bitPointer = this.bitPointer - numBits % 8;\n\n    if (this.bitPointer < 0) {\n      this.bitPointer = 8 + this.bitPointer;\n    }\n\n    return bits;\n  } else if (numBits < this.bitPointer + 1 + 16) {\n    // next word crosses 3 data blocks\n    var mask1 = 0; // mask of first block\n\n    var mask3 = 0; // mask of 3rd block\n    //bitPointer + 1 : number of bits of the 1st block\n    //8 : number of the 2nd block (note that use already 8bits because next word uses 3 data blocks)\n    //numBits - (bitPointer + 1 + 8) : number of bits of the 3rd block\n\n    for (var i = 0; i < this.bitPointer + 1; i++) {\n      mask1 += 1 << i;\n    }\n\n    var bitsFirstBlock = (this.blocks[this.blockPointer] & mask1) << numBits - (this.bitPointer + 1);\n    this.blockPointer++;\n    var bitsSecondBlock = this.blocks[this.blockPointer] << numBits - (this.bitPointer + 1 + 8);\n    this.blockPointer++;\n\n    for (var i = 0; i < numBits - (this.bitPointer + 1 + 8); i++) {\n      mask3 += 1 << i;\n    }\n\n    mask3 <<= 8 - (numBits - (this.bitPointer + 1 + 8));\n    var bitsThirdBlock = (this.blocks[this.blockPointer] & mask3) >> 8 - (numBits - (this.bitPointer + 1 + 8));\n    bits = bitsFirstBlock + bitsSecondBlock + bitsThirdBlock;\n    this.bitPointer = this.bitPointer - (numBits - 8) % 8;\n\n    if (this.bitPointer < 0) {\n      this.bitPointer = 8 + this.bitPointer;\n    }\n\n    return bits;\n  } else {\n    return 0;\n  }\n};\n\nQRCodeDataBlockReader.prototype.NextMode = function () {\n  if (this.blockPointer > this.blocks.length - this.numErrorCorrectionCode - 2) return 0;else return this.getNextBits(4);\n};\n\nQRCodeDataBlockReader.prototype.getDataLength = function (modeIndicator) {\n  var index = 0;\n\n  while (true) {\n    if (modeIndicator >> index == 1) break;\n    index++;\n  }\n\n  return this.getNextBits(qrcode.sizeOfDataLengthInfo[this.dataLengthMode][index]);\n};\n\nQRCodeDataBlockReader.prototype.getRomanAndFigureString = function (dataLength) {\n  var length = dataLength;\n  var intData = 0;\n  var strData = \"\";\n  var tableRomanAndFigure = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', '$', '%', '*', '+', '-', '.', '/', ':'];\n\n  do {\n    if (length > 1) {\n      intData = this.getNextBits(11);\n      var firstLetter = Math.floor(intData / 45);\n      var secondLetter = intData % 45;\n      strData += tableRomanAndFigure[firstLetter];\n      strData += tableRomanAndFigure[secondLetter];\n      length -= 2;\n    } else if (length == 1) {\n      intData = this.getNextBits(6);\n      strData += tableRomanAndFigure[intData];\n      length -= 1;\n    }\n  } while (length > 0);\n\n  return strData;\n};\n\nQRCodeDataBlockReader.prototype.getFigureString = function (dataLength) {\n  var length = dataLength;\n  var intData = 0;\n  var strData = \"\";\n\n  do {\n    if (length >= 3) {\n      intData = this.getNextBits(10);\n      if (intData < 100) strData += \"0\";\n      if (intData < 10) strData += \"0\";\n      length -= 3;\n    } else if (length == 2) {\n      intData = this.getNextBits(7);\n      if (intData < 10) strData += \"0\";\n      length -= 2;\n    } else if (length == 1) {\n      intData = this.getNextBits(4);\n      length -= 1;\n    }\n\n    strData += intData;\n  } while (length > 0);\n\n  return strData;\n};\n\nQRCodeDataBlockReader.prototype.get8bitByteArray = function (dataLength) {\n  var length = dataLength;\n  var intData = 0;\n  var output = [];\n\n  do {\n    intData = this.getNextBits(8);\n    output.push(intData);\n    length--;\n  } while (length > 0);\n\n  return output;\n};\n\nQRCodeDataBlockReader.prototype.getKanjiString = function (dataLength) {\n  var length = dataLength;\n  var intData = 0;\n  var unicodeString = \"\";\n\n  do {\n    intData = this.getNextBits(13);\n    var lowerByte = intData % 0xC0;\n    var higherByte = intData / 0xC0;\n    var tempWord = (higherByte << 8) + lowerByte;\n    var shiftjisWord = 0;\n\n    if (tempWord + 0x8140 <= 0x9FFC) {\n      // between 8140 - 9FFC on Shift_JIS character set\n      shiftjisWord = tempWord + 0x8140;\n    } else {\n      // between E040 - EBBF on Shift_JIS character set\n      shiftjisWord = tempWord + 0xC140;\n    }\n\n    unicodeString += String.fromCharCode(shiftjisWord);\n    length--;\n  } while (length > 0);\n\n  return unicodeString;\n};\n\nObject.defineProperty(QRCodeDataBlockReader.prototype, \"DataByte\", {\n  get: function get() {\n    var output = [];\n    var MODE_NUMBER = 1;\n    var MODE_ROMAN_AND_NUMBER = 2;\n    var MODE_8BIT_BYTE = 4;\n    var MODE_KANJI = 8;\n\n    do {\n      var mode = this.NextMode();\n\n      if (mode == 0) {\n        if (output.length > 0) break;else throw \"Empty data block\";\n      } //if (mode != 1 && mode != 2 && mode != 4 && mode != 8)\n      //}\n\n\n      if (mode != MODE_NUMBER && mode != MODE_ROMAN_AND_NUMBER && mode != MODE_8BIT_BYTE && mode != MODE_KANJI && mode != 7) {\n        /*          canvas.println(\"Invalid mode: \" + mode);\n         mode = guessMode(mode);\n         canvas.println(\"Guessed mode: \" + mode); */\n        throw \"Invalid mode: \" + mode + \" in (block:\" + this.blockPointer + \" bit:\" + this.bitPointer + \")\";\n      }\n\n      var dataLength = this.getDataLength(mode);\n      if (dataLength < 1) throw \"Invalid data length: \" + dataLength;\n\n      switch (mode) {\n        case MODE_NUMBER:\n          var temp_str = this.getFigureString(dataLength);\n          var ta = new Array(temp_str.length);\n\n          for (var j = 0; j < temp_str.length; j++) {\n            ta[j] = temp_str.charCodeAt(j);\n          }\n\n          output.push(ta);\n          break;\n\n        case MODE_ROMAN_AND_NUMBER:\n          var temp_str = this.getRomanAndFigureString(dataLength);\n          var ta = new Array(temp_str.length);\n\n          for (var j = 0; j < temp_str.length; j++) {\n            ta[j] = temp_str.charCodeAt(j);\n          }\n\n          output.push(ta);\n          break;\n\n        case MODE_8BIT_BYTE:\n          var temp_sbyteArray3 = this.get8bitByteArray(dataLength);\n          output.push(temp_sbyteArray3);\n          break;\n\n        case MODE_KANJI:\n          var temp_str = this.getKanjiString(dataLength);\n          output.push(temp_str);\n          break;\n      } //\n\n    } while (true);\n\n    return output;\n  }\n});","map":null,"metadata":{},"sourceType":"module"}