{"ast":null,"code":"import _slicedToArray from \"/Users/petrhoskovec/Desktop/code/Charlie2.0/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nexport function useWindowSize() {\n  const isClient = typeof window === 'object';\n\n  function getSize() {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    };\n  }\n\n  const _useState = useState(getSize),\n        _useState2 = _slicedToArray(_useState, 2),\n        windowSize = _useState2[0],\n        setWindowSize = _useState2[1];\n\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n\n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n}","map":{"version":3,"sources":["/Users/petrhoskovec/Desktop/code/Charlie2.0/client/src/Hooks/useWindowSize.js"],"names":["React","useState","useEffect","useWindowSize","isClient","window","getSize","width","innerWidth","undefined","height","innerHeight","windowSize","setWindowSize","handleResize","addEventListener","removeEventListener"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAGA,OAAO,SAASC,aAAT,GAAyB;AAC9B,QAAMC,QAAQ,GAAG,OAAOC,MAAP,KAAkB,QAAnC;;AAEA,WAASC,OAAT,GAAmB;AACjB,WAAO;AACLC,MAAAA,KAAK,EAAEH,QAAQ,GAAGC,MAAM,CAACG,UAAV,GAAuBC,SADjC;AAELC,MAAAA,MAAM,EAAEN,QAAQ,GAAGC,MAAM,CAACM,WAAV,GAAwBF;AAFnC,KAAP;AAID;;AAR6B,oBAUMR,QAAQ,CAACK,OAAD,CAVd;AAAA;AAAA,QAUvBM,UAVuB;AAAA,QAUXC,aAVW;;AAY9BX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACE,QAAL,EAAe;AACb,aAAO,KAAP;AACD;;AAED,aAASU,YAAT,GAAwB;AACtBD,MAAAA,aAAa,CAACP,OAAO,EAAR,CAAb;AACD;;AAEDD,IAAAA,MAAM,CAACU,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;AACA,WAAO,MAAMT,MAAM,CAACW,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC,CAAb;AACD,GAXQ,EAWN,EAXM,CAAT,CAZ8B,CAuBtB;;AAER,SAAOF,UAAP;AACD","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n\nexport function useWindowSize() {\n  const isClient = typeof window === 'object';\n\n  function getSize() {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    };\n  }\n\n  const [windowSize, setWindowSize] = useState(getSize);\n\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n    \n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n}"]},"metadata":{},"sourceType":"module"}