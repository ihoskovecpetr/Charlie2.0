{"ast":null,"code":"import React from \"react\";\nexport function useCountDistance(lat1, lon1, lat2, lon2, unit) {\n  if (lat1 == lat2 && lon1 == lon2) {\n    return 0;\n  } else {\n    var radlat1 = Math.PI * lat1 / 180;\n    var radlat2 = Math.PI * lat2 / 180;\n    var theta = lon1 - lon2;\n    var radtheta = Math.PI * theta / 180;\n    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n\n    if (dist > 1) {\n      dist = 1;\n    }\n\n    dist = Math.acos(dist);\n    dist = dist * 180 / Math.PI;\n    dist = dist * 60 * 1.1515;\n\n    if (unit == \"K\") {\n      dist = dist * 1.609344;\n    }\n\n    if (unit == \"N\") {\n      dist = dist * 0.8684;\n    }\n\n    return dist;\n  }\n}","map":{"version":3,"sources":["/Users/petrhoskovec/Desktop/code/Charlie2.0/client/src/Hooks/useCountDistance.js"],"names":["React","useCountDistance","lat1","lon1","lat2","lon2","unit","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,SAASC,gBAAT,CAA0BC,IAA1B,EAAgCC,IAAhC,EAAsCC,IAAtC,EAA4CC,IAA5C,EAAkDC,IAAlD,EAAwD;AAC9D,MAAKJ,IAAI,IAAIE,IAAT,IAAmBD,IAAI,IAAIE,IAA/B,EAAsC;AACrC,WAAO,CAAP;AACA,GAFD,MAGK;AACJ,QAAIE,OAAO,GAAGC,IAAI,CAACC,EAAL,GAAUP,IAAV,GAAe,GAA7B;AACA,QAAIQ,OAAO,GAAGF,IAAI,CAACC,EAAL,GAAUL,IAAV,GAAe,GAA7B;AACA,QAAIO,KAAK,GAAGR,IAAI,GAACE,IAAjB;AACA,QAAIO,QAAQ,GAAGJ,IAAI,CAACC,EAAL,GAAUE,KAAV,GAAgB,GAA/B;AACA,QAAIE,IAAI,GAAGL,IAAI,CAACM,GAAL,CAASP,OAAT,IAAoBC,IAAI,CAACM,GAAL,CAASJ,OAAT,CAApB,GAAwCF,IAAI,CAACO,GAAL,CAASR,OAAT,IAAoBC,IAAI,CAACO,GAAL,CAASL,OAAT,CAApB,GAAwCF,IAAI,CAACO,GAAL,CAASH,QAAT,CAA3F;;AACA,QAAIC,IAAI,GAAG,CAAX,EAAc;AACbA,MAAAA,IAAI,GAAG,CAAP;AACA;;AACDA,IAAAA,IAAI,GAAGL,IAAI,CAACQ,IAAL,CAAUH,IAAV,CAAP;AACAA,IAAAA,IAAI,GAAGA,IAAI,GAAG,GAAP,GAAWL,IAAI,CAACC,EAAvB;AACAI,IAAAA,IAAI,GAAGA,IAAI,GAAG,EAAP,GAAY,MAAnB;;AACA,QAAIP,IAAI,IAAE,GAAV,EAAe;AACdO,MAAAA,IAAI,GAAGA,IAAI,GAAG,QAAd;AACC;;AACF,QAAIP,IAAI,IAAE,GAAV,EAAe;AAAEO,MAAAA,IAAI,GAAGA,IAAI,GAAG,MAAd;AAAsB;;AACvC,WAAOA,IAAP;AACA;AACD","sourcesContent":["import React from \"react\"\n\nexport function useCountDistance(lat1, lon1, lat2, lon2, unit) {\n\tif ((lat1 == lat2) && (lon1 == lon2)) {\n\t\treturn 0;\n\t}\n\telse {\n\t\tvar radlat1 = Math.PI * lat1/180;\n\t\tvar radlat2 = Math.PI * lat2/180;\n\t\tvar theta = lon1-lon2;\n\t\tvar radtheta = Math.PI * theta/180;\n\t\tvar dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n\t\tif (dist > 1) {\n\t\t\tdist = 1;\n\t\t}\n\t\tdist = Math.acos(dist);\n\t\tdist = dist * 180/Math.PI;\n\t\tdist = dist * 60 * 1.1515;\n\t\tif (unit==\"K\") { \n\t\t\tdist = dist * 1.609344\n\t\t }\n\t\tif (unit==\"N\") { dist = dist * 0.8684 }\n\t\treturn dist;\n\t}\n}"]},"metadata":{},"sourceType":"module"}