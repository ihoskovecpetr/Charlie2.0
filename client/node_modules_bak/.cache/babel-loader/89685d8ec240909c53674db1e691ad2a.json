{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactImages = require('react-images');\n\nvar _reactImages2 = _interopRequireDefault(_reactImages);\n\nvar _Image = require('./Image.js');\n\nvar _Image2 = _interopRequireDefault(_Image);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Gallery = function (_Component) {\n  _inherits(Gallery, _Component);\n\n  function Gallery(props) {\n    _classCallCheck(this, Gallery);\n\n    var _this = _possibleConstructorReturn(this, (Gallery.__proto__ || Object.getPrototypeOf(Gallery)).call(this, props));\n\n    _this.state = {\n      images: _this.props.images,\n      thumbnails: [],\n      lightboxIsOpen: _this.props.isOpen,\n      currentImage: _this.props.currentImage,\n      containerWidth: 0\n    };\n    _this.onResize = _this.onResize.bind(_this);\n    _this.closeLightbox = _this.closeLightbox.bind(_this);\n    _this.gotoImage = _this.gotoImage.bind(_this);\n    _this.gotoNext = _this.gotoNext.bind(_this);\n    _this.gotoPrevious = _this.gotoPrevious.bind(_this);\n    _this.onClickImage = _this.onClickImage.bind(_this);\n    _this.openLightbox = _this.openLightbox.bind(_this);\n    _this.onSelectImage = _this.onSelectImage.bind(_this);\n    return _this;\n  }\n\n  _createClass(Gallery, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.onResize();\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(np) {\n      if (this.state.currentImage > np.images.length - 1) {\n        this.setState({\n          currentImage: np.images.length - 1\n        });\n      }\n\n      if (this.state.images != np.images || this.props.maxRows != np.maxRows) {\n        this.setState({\n          images: np.images,\n          thumbnails: this.renderThumbs(this._gallery.clientWidth, np.images)\n        });\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      if (!this._gallery) return;\n\n      if (this._gallery.clientWidth !== this.state.containerWidth) {\n        this.onResize();\n      }\n    }\n  }, {\n    key: 'onResize',\n    value: function onResize() {\n      if (!this._gallery) return;\n      this.setState({\n        containerWidth: Math.floor(this._gallery.clientWidth),\n        thumbnails: this.renderThumbs(this._gallery.clientWidth)\n      });\n    }\n  }, {\n    key: 'openLightbox',\n    value: function openLightbox(index, event) {\n      if (event) {\n        event.preventDefault();\n      }\n\n      if (this.props.lightboxWillOpen) {\n        this.props.lightboxWillOpen.call(this, index);\n      }\n\n      if (this.props.currentImageWillChange) {\n        this.props.currentImageWillChange.call(this, index);\n      }\n\n      this.setState({\n        currentImage: index,\n        lightboxIsOpen: true\n      });\n    }\n  }, {\n    key: 'closeLightbox',\n    value: function closeLightbox() {\n      if (this.props.lightboxWillClose) {\n        this.props.lightboxWillClose.call(this);\n      }\n\n      if (this.props.currentImageWillChange) {\n        this.props.currentImageWillChange.call(this, 0);\n      }\n\n      this.setState({\n        currentImage: 0,\n        lightboxIsOpen: false\n      });\n    }\n  }, {\n    key: 'gotoPrevious',\n    value: function gotoPrevious() {\n      if (this.props.currentImageWillChange) {\n        this.props.currentImageWillChange.call(this, this.state.currentImage - 1);\n      }\n\n      this.setState({\n        currentImage: this.state.currentImage - 1\n      });\n    }\n  }, {\n    key: 'gotoNext',\n    value: function gotoNext() {\n      if (this.props.currentImageWillChange) {\n        this.props.currentImageWillChange.call(this, this.state.currentImage + 1);\n      }\n\n      this.setState({\n        currentImage: this.state.currentImage + 1\n      });\n    }\n  }, {\n    key: 'onClickImage',\n    value: function onClickImage() {\n      if (this.state.currentImage === this.props.images.length - 1) return;\n      this.gotoNext();\n    }\n  }, {\n    key: 'onSelectImage',\n    value: function onSelectImage(index, event) {\n      event.preventDefault();\n      if (this.props.onSelectImage) this.props.onSelectImage.call(this, index, this.state.images[index]);\n    }\n  }, {\n    key: 'gotoImage',\n    value: function gotoImage(index) {\n      if (this.props.currentImageWillChange) {\n        this.props.currentImageWillChange.call(this, index);\n      }\n\n      this.setState({\n        currentImage: index\n      });\n    }\n  }, {\n    key: 'getOnClickThumbnailFn',\n    value: function getOnClickThumbnailFn() {\n      if (!this.props.onClickThumbnail && this.props.enableLightbox) return this.openLightbox;\n      if (this.props.onClickThumbnail) return this.props.onClickThumbnail;\n      return null;\n    }\n  }, {\n    key: 'getOnClickLightboxThumbnailFn',\n    value: function getOnClickLightboxThumbnailFn() {\n      if (!this.props.onClickLightboxThumbnail && this.props.showLightboxThumbnails) return this.gotoImage;\n      if (this.props.onClickLightboxThumbnail && this.props.showLightboxThumbnails) return this.props.onClickLightboxThumbnail;\n      return null;\n    }\n  }, {\n    key: 'getOnClickImageFn',\n    value: function getOnClickImageFn() {\n      if (this.props.onClickImage) return this.props.onClickImage;\n      return this.onClickImage;\n    }\n  }, {\n    key: 'getOnClickPrevFn',\n    value: function getOnClickPrevFn() {\n      if (this.props.onClickPrev) return this.props.onClickPrev;\n      return this.gotoPrevious;\n    }\n  }, {\n    key: 'getOnClickNextFn',\n    value: function getOnClickNextFn() {\n      if (this.props.onClickNext) return this.props.onClickNext;\n      return this.gotoNext;\n    }\n  }, {\n    key: 'calculateCutOff',\n    value: function calculateCutOff(len, delta, items) {\n      var cutoff = [];\n      var cutsum = 0;\n\n      for (var i in items) {\n        var item = items[i];\n        var fractOfLen = item.scaletwidth / len;\n        cutoff[i] = Math.floor(fractOfLen * delta);\n        cutsum += cutoff[i];\n      }\n\n      var stillToCutOff = delta - cutsum;\n\n      while (stillToCutOff > 0) {\n        for (i in cutoff) {\n          cutoff[i]++;\n          stillToCutOff--;\n          if (stillToCutOff < 0) break;\n        }\n      }\n\n      return cutoff;\n    }\n  }, {\n    key: 'buildImageRow',\n    value: function buildImageRow(items, containerWidth) {\n      var row = [];\n      var len = 0;\n      var imgMargin = 2 * this.props.margin;\n\n      while (items.length > 0 && len < containerWidth) {\n        var item = items.shift();\n        row.push(item);\n        len += item.scaletwidth + imgMargin;\n      }\n\n      var delta = len - containerWidth;\n\n      if (row.length > 0 && delta > 0) {\n        var cutoff = this.calculateCutOff(len, delta, row);\n\n        for (var i in row) {\n          var pixelsToRemove = cutoff[i];\n          item = row[i];\n          item.marginLeft = -Math.abs(Math.floor(pixelsToRemove / 2));\n          item.vwidth = item.scaletwidth - pixelsToRemove;\n        }\n      } else {\n        for (var j in row) {\n          item = row[j];\n          item.marginLeft = 0;\n          item.vwidth = item.scaletwidth;\n        }\n      }\n\n      return row;\n    }\n  }, {\n    key: 'setThumbScale',\n    value: function setThumbScale(item) {\n      item.scaletwidth = Math.floor(this.props.rowHeight * (item.thumbnailWidth / item.thumbnailHeight));\n    }\n  }, {\n    key: 'renderThumbs',\n    value: function renderThumbs(containerWidth) {\n      var images = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.images;\n      if (!images) return [];\n      if (containerWidth == 0) return [];\n      var items = images.slice();\n\n      for (var t in items) {\n        this.setThumbScale(items[t]);\n      }\n\n      var thumbs = [];\n      var rows = [];\n\n      while (items.length > 0) {\n        rows.push(this.buildImageRow(items, containerWidth));\n      }\n\n      for (var r in rows) {\n        for (var i in rows[r]) {\n          var item = rows[r][i];\n\n          if (this.props.maxRows) {\n            if (r < this.props.maxRows) {\n              thumbs.push(item);\n            }\n          } else {\n            thumbs.push(item);\n          }\n        }\n      }\n\n      return thumbs;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var images = this.state.thumbnails.map(function (item, idx) {\n        return _react2.default.createElement(_Image2.default, {\n          key: \"Image-\" + idx + \"-\" + item.src,\n          item: item,\n          index: idx,\n          margin: _this2.props.margin,\n          height: _this2.props.rowHeight,\n          isSelectable: _this2.props.enableImageSelection,\n          onClick: _this2.getOnClickThumbnailFn(),\n          onSelectImage: _this2.onSelectImage,\n          tagStyle: _this2.props.tagStyle,\n          tileViewportStyle: _this2.props.tileViewportStyle,\n          thumbnailStyle: _this2.props.thumbnailStyle,\n          thumbnailImageComponent: _this2.props.thumbnailImageComponent\n        });\n      });\n      var resizeIframeStyles = {\n        height: 0,\n        margin: 0,\n        padding: 0,\n        overflow: \"hidden\",\n        borderWidth: 0,\n        position: \"fixed\",\n        backgroundColor: \"transparent\",\n        width: \"100%\"\n      };\n      return _react2.default.createElement('div', {\n        id: this.props.id,\n        className: 'ReactGridGallery',\n        ref: function ref(c) {\n          return _this2._gallery = c;\n        }\n      }, _react2.default.createElement('iframe', {\n        style: resizeIframeStyles,\n        ref: function ref(c) {\n          return c && c.contentWindow && c.contentWindow.addEventListener('resize', _this2.onResize);\n        }\n      }), images, _react2.default.createElement(_reactImages2.default, _extends({\n        images: this.props.images,\n        backdropClosesModal: this.props.backdropClosesModal,\n        currentImage: this.state.currentImage,\n        preloadNextImage: this.props.preloadNextImage,\n        customControls: this.props.customControls,\n        enableKeyboardInput: this.props.enableKeyboardInput,\n        imageCountSeparator: this.props.imageCountSeparator,\n        isOpen: this.state.lightboxIsOpen,\n        onClickImage: this.getOnClickImageFn(),\n        onClickNext: this.getOnClickNextFn(),\n        onClickPrev: this.getOnClickPrevFn(),\n        showCloseButton: this.props.showCloseButton,\n        showImageCount: this.props.showImageCount,\n        onClose: this.closeLightbox,\n        width: this.props.lightboxWidth,\n        theme: this.props.theme,\n        onClickThumbnail: this.getOnClickLightboxThumbnailFn(),\n        showThumbnails: this.props.showLightboxThumbnails\n      }, this.props.lightBoxProps)));\n    }\n  }]);\n\n  return Gallery;\n}(_react.Component);\n\nGallery.displayName = 'Gallery';\nGallery.propTypes = {\n  images: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    src: _propTypes2.default.string.isRequired,\n    nano: _propTypes2.default.string,\n    alt: _propTypes2.default.string,\n    thumbnail: _propTypes2.default.string.isRequired,\n    srcset: _propTypes2.default.array,\n    caption: _propTypes2.default.string,\n    tags: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n      value: _propTypes2.default.string.isRequired,\n      title: _propTypes2.default.string.isRequired\n    })),\n    thumbnailWidth: _propTypes2.default.number.isRequired,\n    thumbnailHeight: _propTypes2.default.number.isRequired,\n    isSelected: _propTypes2.default.bool,\n    thumbnailCaption: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element])\n  })).isRequired,\n  id: _propTypes2.default.string,\n  enableImageSelection: _propTypes2.default.bool,\n  onSelectImage: _propTypes2.default.func,\n  rowHeight: _propTypes2.default.number,\n  maxRows: _propTypes2.default.number,\n  margin: _propTypes2.default.number,\n  onClickThumbnail: _propTypes2.default.func,\n  lightboxWillOpen: _propTypes2.default.func,\n  lightboxWillClose: _propTypes2.default.func,\n  enableLightbox: _propTypes2.default.bool,\n  backdropClosesModal: _propTypes2.default.bool,\n  currentImage: _propTypes2.default.number,\n  preloadNextImage: _propTypes2.default.bool,\n  customControls: _propTypes2.default.arrayOf(_propTypes2.default.node),\n  currentImageWillChange: _propTypes2.default.func,\n  enableKeyboardInput: _propTypes2.default.bool,\n  imageCountSeparator: _propTypes2.default.string,\n  isOpen: _propTypes2.default.bool,\n  onClickImage: _propTypes2.default.func,\n  onClickNext: _propTypes2.default.func,\n  onClickPrev: _propTypes2.default.func,\n  onClose: _propTypes2.default.func,\n  showCloseButton: _propTypes2.default.bool,\n  showImageCount: _propTypes2.default.bool,\n  lightboxWidth: _propTypes2.default.number,\n  tileViewportStyle: _propTypes2.default.func,\n  thumbnailStyle: _propTypes2.default.func,\n  showLightboxThumbnails: _propTypes2.default.bool,\n  onClickLightboxThumbnail: _propTypes2.default.func,\n  tagStyle: _propTypes2.default.object,\n  thumbnailImageComponent: _propTypes2.default.func,\n  lightBoxProps: _propTypes2.default.object\n};\nGallery.defaultProps = {\n  id: \"ReactGridGallery\",\n  enableImageSelection: true,\n  rowHeight: 180,\n  margin: 2,\n  enableLightbox: true,\n  backdropClosesModal: false,\n  currentImage: 0,\n  preloadNextImage: true,\n  enableKeyboardInput: true,\n  imageCountSeparator: ' of ',\n  isOpen: false,\n  showCloseButton: true,\n  showImageCount: true,\n  lightboxWidth: 1024,\n  showLightboxThumbnails: false,\n  lightBoxProps: {}\n};\nmodule.exports = Gallery;","map":null,"metadata":{},"sourceType":"script"}