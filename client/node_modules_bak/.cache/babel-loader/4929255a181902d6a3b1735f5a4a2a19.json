{"ast":null,"code":"import React from\"react\";export function useCountDistance(lat1,lon1,lat2,lon2,unit){if(lat1==lat2&&lon1==lon2){return 0;}else{var radlat1=Math.PI*lat1/180;var radlat2=Math.PI*lat2/180;var theta=lon1-lon2;var radtheta=Math.PI*theta/180;var dist=Math.sin(radlat1)*Math.sin(radlat2)+Math.cos(radlat1)*Math.cos(radlat2)*Math.cos(radtheta);if(dist>1){dist=1;}dist=Math.acos(dist);dist=dist*180/Math.PI;dist=dist*60*1.1515;if(unit==\"K\"){dist=dist*1.609344;}if(unit==\"N\"){dist=dist*0.8684;}return dist;}}","map":{"version":3,"sources":["/Users/petrhoskovec/Desktop/code/Charlie2.0/client/src/Hooks/useCountDistance.js"],"names":["React","useCountDistance","lat1","lon1","lat2","lon2","unit","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAO,SAASC,CAAAA,gBAAT,CAA0BC,IAA1B,CAAgCC,IAAhC,CAAsCC,IAAtC,CAA4CC,IAA5C,CAAkDC,IAAlD,CAAwD,CAC9D,GAAKJ,IAAI,EAAIE,IAAT,EAAmBD,IAAI,EAAIE,IAA/B,CAAsC,CACrC,MAAO,EAAP,CACA,CAFD,IAGK,CACJ,GAAIE,CAAAA,OAAO,CAAGC,IAAI,CAACC,EAAL,CAAUP,IAAV,CAAe,GAA7B,CACA,GAAIQ,CAAAA,OAAO,CAAGF,IAAI,CAACC,EAAL,CAAUL,IAAV,CAAe,GAA7B,CACA,GAAIO,CAAAA,KAAK,CAAGR,IAAI,CAACE,IAAjB,CACA,GAAIO,CAAAA,QAAQ,CAAGJ,IAAI,CAACC,EAAL,CAAUE,KAAV,CAAgB,GAA/B,CACA,GAAIE,CAAAA,IAAI,CAAGL,IAAI,CAACM,GAAL,CAASP,OAAT,EAAoBC,IAAI,CAACM,GAAL,CAASJ,OAAT,CAApB,CAAwCF,IAAI,CAACO,GAAL,CAASR,OAAT,EAAoBC,IAAI,CAACO,GAAL,CAASL,OAAT,CAApB,CAAwCF,IAAI,CAACO,GAAL,CAASH,QAAT,CAA3F,CACA,GAAIC,IAAI,CAAG,CAAX,CAAc,CACbA,IAAI,CAAG,CAAP,CACA,CACDA,IAAI,CAAGL,IAAI,CAACQ,IAAL,CAAUH,IAAV,CAAP,CACAA,IAAI,CAAGA,IAAI,CAAG,GAAP,CAAWL,IAAI,CAACC,EAAvB,CACAI,IAAI,CAAGA,IAAI,CAAG,EAAP,CAAY,MAAnB,CACA,GAAIP,IAAI,EAAE,GAAV,CAAe,CACdO,IAAI,CAAGA,IAAI,CAAG,QAAd,CACC,CACF,GAAIP,IAAI,EAAE,GAAV,CAAe,CAAEO,IAAI,CAAGA,IAAI,CAAG,MAAd,CAAsB,CACvC,MAAOA,CAAAA,IAAP,CACA,CACD","sourcesContent":["import React from \"react\"\n\nexport function useCountDistance(lat1, lon1, lat2, lon2, unit) {\n\tif ((lat1 == lat2) && (lon1 == lon2)) {\n\t\treturn 0;\n\t}\n\telse {\n\t\tvar radlat1 = Math.PI * lat1/180;\n\t\tvar radlat2 = Math.PI * lat2/180;\n\t\tvar theta = lon1-lon2;\n\t\tvar radtheta = Math.PI * theta/180;\n\t\tvar dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n\t\tif (dist > 1) {\n\t\t\tdist = 1;\n\t\t}\n\t\tdist = Math.acos(dist);\n\t\tdist = dist * 180/Math.PI;\n\t\tdist = dist * 60 * 1.1515;\n\t\tif (unit==\"K\") { \n\t\t\tdist = dist * 1.609344\n\t\t }\n\t\tif (unit==\"N\") { dist = dist * 0.8684 }\n\t\treturn dist;\n\t}\n}"]},"metadata":{},"sourceType":"module"}