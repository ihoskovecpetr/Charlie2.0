{"ast":null,"code":"/*\n  Ported to JavaScript by Lazar Laszlo 2011\n\n  lazarsoft@gmail.com, www.lazarsoft.info\n\n*/\n\n/*\n*\n* Copyright 2007 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport GF256Poly from './gf256poly';\nexport default function GF256(primitive) {\n  this.expTable = new Array(256);\n  this.logTable = new Array(256);\n  var x = 1;\n\n  for (var i = 0; i < 256; i++) {\n    this.expTable[i] = x;\n    x <<= 1; // x = x * 2; we're assuming the generator alpha is 2\n\n    if (x >= 0x100) {\n      x ^= primitive;\n    }\n  }\n\n  for (var i = 0; i < 255; i++) {\n    this.logTable[this.expTable[i]] = i;\n  } // logTable[0] == 0 but this should never be used\n\n\n  var at0 = new Array(1);\n  at0[0] = 0;\n  this.zero = new GF256Poly(this, new Array(at0));\n  var at1 = new Array(1);\n  at1[0] = 1;\n  this.one = new GF256Poly(this, new Array(at1));\n}\nObject.defineProperty(GF256.prototype, \"Zero\", {\n  get: function get() {\n    return this.zero;\n  }\n});\nObject.defineProperty(GF256.prototype, \"One\", {\n  get: function get() {\n    return this.one;\n  }\n});\n\nGF256.prototype.buildMonomial = function (degree, coefficient) {\n  if (degree < 0) {\n    throw \"System.ArgumentException\";\n  }\n\n  if (coefficient == 0) {\n    return this.zero;\n  }\n\n  var coefficients = new Array(degree + 1);\n\n  for (var i = 0; i < coefficients.length; i++) {\n    coefficients[i] = 0;\n  }\n\n  coefficients[0] = coefficient;\n  return new GF256Poly(this, coefficients);\n};\n\nGF256.prototype.exp = function (a) {\n  return this.expTable[a];\n};\n\nGF256.prototype.log = function (a) {\n  if (a == 0) {\n    throw \"System.ArgumentException\";\n  }\n\n  return this.logTable[a];\n};\n\nGF256.prototype.inverse = function (a) {\n  if (a == 0) {\n    throw \"System.ArithmeticException\";\n  }\n\n  return this.expTable[255 - this.logTable[a]];\n};\n\nGF256.prototype.addOrSubtract = function (a, b) {\n  return a ^ b;\n};\n\nGF256.prototype.multiply = function (a, b) {\n  if (a == 0 || b == 0) {\n    return 0;\n  }\n\n  if (a == 1) {\n    return b;\n  }\n\n  if (b == 1) {\n    return a;\n  }\n\n  return this.expTable[(this.logTable[a] + this.logTable[b]) % 255];\n};\n\nGF256.QR_CODE_FIELD = new GF256(0x011D);\nGF256.DATA_MATRIX_FIELD = new GF256(0x012D);","map":null,"metadata":{},"sourceType":"module"}