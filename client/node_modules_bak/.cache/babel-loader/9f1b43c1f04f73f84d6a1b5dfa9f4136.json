{"ast":null,"code":"import _slicedToArray from\"/Users/petrhoskovec/Desktop/code/Charlie2.0/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";export function useHighlitedSearchString(_ref){var string=_ref.string,searchText=_ref.searchText;var _useState=useState(0),_useState2=_slicedToArray(_useState,2),averageRating=_useState2[0],setAverageRating=_useState2[1];var regex=new RegExp(searchText,\"i\");console.log(\"REGEX TEXTS: \",regex);var resultStrArr=string.split(regex);var newSearchText=searchText;console.log(\"resultStrArr: \",resultStrArr);if(resultStrArr.length===1){console.log(\"FIRST SPILT NIC\");var searchTxtArr=searchText.split(\" \");for(var i=0;i<searchTxtArr.length;i++){console.log(\"DEEP SPLIT\");var _regex=new RegExp(searchTxtArr[i],\"i\");var deepSearchStringArr=resultStrArr[0].split(_regex);if(deepSearchStringArr.length!=1){resultStrArr=deepSearchStringArr;newSearchText=searchTxtArr[i];console.log(\"DEEP cutter: \",newSearchText);break;}}}var processedStringMap=resultStrArr.map(function(subS,index){return React.createElement(React.Fragment,null,React.createElement(\"span\",null,subS),resultStrArr.length!=index+1&&React.createElement(\"span\",{style:{backgroundColor:\"yellow\"}},newSearchText));});return processedStringMap;}","map":{"version":3,"sources":["/Users/petrhoskovec/Desktop/code/Charlie2.0/client/src/Hooks/useHighlitedSearchString.js"],"names":["React","useState","useEffect","useHighlitedSearchString","string","searchText","averageRating","setAverageRating","regex","RegExp","console","log","resultStrArr","split","newSearchText","length","searchTxtArr","i","deepSearchStringArr","processedStringMap","map","subS","index","backgroundColor"],"mappings":"qIAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CAGA,MAAO,SAASC,CAAAA,wBAAT,MAAwD,IAArBC,CAAAA,MAAqB,MAArBA,MAAqB,CAAbC,UAAa,MAAbA,UAAa,eACpBJ,QAAQ,CAAC,CAAD,CADY,wCACvDK,aADuD,eACxCC,gBADwC,eAG9D,GAAIC,CAAAA,KAAK,CAAG,GAAIC,CAAAA,MAAJ,CAAWJ,UAAX,CAAuB,GAAvB,CAAZ,CAEAK,OAAO,CAACC,GAAR,CAAY,eAAZ,CAA6BH,KAA7B,EAGA,GAAII,CAAAA,YAAY,CAAGR,MAAM,CAACS,KAAP,CAAaL,KAAb,CAAnB,CACA,GAAIM,CAAAA,aAAa,CAAGT,UAApB,CAEAK,OAAO,CAACC,GAAR,CAAY,gBAAZ,CAA8BC,YAA9B,EAEA,GAAGA,YAAY,CAACG,MAAb,GAAwB,CAA3B,CAA6B,CAC5BL,OAAO,CAACC,GAAR,CAAY,iBAAZ,EACA,GAAMK,CAAAA,YAAY,CAAGX,UAAU,CAACQ,KAAX,CAAiB,GAAjB,CAArB,CACA,IAAK,GAAII,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGD,YAAY,CAACD,MAAjC,CAAyCE,CAAC,EAA1C,CAA8C,CAC7CP,OAAO,CAACC,GAAR,CAAY,YAAZ,EACA,GAAMH,CAAAA,MAAK,CAAG,GAAIC,CAAAA,MAAJ,CAAWO,YAAY,CAACC,CAAD,CAAvB,CAA4B,GAA5B,CAAd,CACA,GAAMC,CAAAA,mBAAmB,CAAGN,YAAY,CAAC,CAAD,CAAZ,CAAgBC,KAAhB,CAAsBL,MAAtB,CAA5B,CACA,GAAIU,mBAAmB,CAACH,MAApB,EAA8B,CAAlC,CAAqC,CACpCH,YAAY,CAAGM,mBAAf,CACAJ,aAAa,CAAGE,YAAY,CAACC,CAAD,CAA5B,CACAP,OAAO,CAACC,GAAR,CAAY,eAAZ,CAA6BG,aAA7B,EACC,MACD,CACC,CACH,CAED,GAAMK,CAAAA,kBAAkB,CAAGP,YAAY,CAACQ,GAAb,CAAiB,SAACC,IAAD,CAAOC,KAAP,CAAiB,CAAC,MAC9D,yCAAE,gCAAOD,IAAP,CAAF,CACET,YAAY,CAACG,MAAb,EAAuBO,KAAK,CAAG,CAA/B,EACE,4BAAM,KAAK,CAAE,CAACC,eAAe,CAAE,QAAlB,CAAb,EAA4CT,aAA5C,CAFJ,CAD8D,CAI5D,CAJyB,CAA3B,CAMD,MAAOK,CAAAA,kBAAP,CACC","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n\nexport function useHighlitedSearchString({string, searchText}) {\n\tconst [averageRating, setAverageRating] = useState(0)\n\n\tvar regex = new RegExp(searchText, \"i\");\n\n\tconsole.log(\"REGEX TEXTS: \", regex)\n\n\n\tlet resultStrArr = string.split(regex)\n\tlet newSearchText = searchText\n\n\tconsole.log(\"resultStrArr: \", resultStrArr)\n\n\tif(resultStrArr.length === 1){\n\t\tconsole.log(\"FIRST SPILT NIC\")\n\t\tconst searchTxtArr = searchText.split(\" \")\n\t\tfor (var i = 0; i < searchTxtArr.length; i++) {\n\t\t\tconsole.log(\"DEEP SPLIT\")\n\t\t\tconst regex = new RegExp(searchTxtArr[i], \"i\");\n\t\t\tconst deepSearchStringArr = resultStrArr[0].split(regex)\n\t\t\tif (deepSearchStringArr.length != 1) {\n\t\t\t\tresultStrArr = deepSearchStringArr;\n\t\t\t\tnewSearchText = searchTxtArr[i]\n\t\t\t\tconsole.log(\"DEEP cutter: \", newSearchText)\n\t\t\t  break;\n\t\t\t}\n\t\t  }\n\t}\n\n\tconst processedStringMap = resultStrArr.map((subS, index) => {return(\n\t<><span>{subS}</span>\n\t\t{resultStrArr.length != index + 1 \n\t\t&& <span style={{backgroundColor: \"yellow\"}} >{newSearchText}</span>}</>\n\t)})\n\nreturn processedStringMap\n}"]},"metadata":{},"sourceType":"module"}