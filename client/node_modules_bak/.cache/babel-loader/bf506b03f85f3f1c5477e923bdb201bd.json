{"ast":null,"code":"import _slicedToArray from \"/Users/petrhoskovec/Desktop/code/Charlie2.0-renew/Charlie2.0/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/petrhoskovec/Desktop/code/Charlie2.0-renew/Charlie2.0/client/src/Atoms/Search/UserResult.js\";\nimport React, { useState, useRef, useContext, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { red } from \"@material-ui/core/colors\";\nimport { withRouter, useHistory, NavLink } from \"react-router-dom\";\nimport { useXsSize } from \"src/Hooks/useXsSize\";\nimport { useHighlitedSearchString } from \"src/Hooks/useHighlitedSearchString\";\nimport { UserContext } from \"src/userContext\";\nimport AverageRatingStars from \"src/Atoms/AverageRatingStars\";\nexport default function UserResult({\n  user,\n  searchText\n}) {\n  const classes = useStyles();\n  let history = useHistory();\n\n  const _useXsSize = useXsSize(),\n        xs_size_memo = _useXsSize.xs_size_memo,\n        md_size_memo = _useXsSize.md_size_memo;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        expanded = _useState2[0],\n        setExpanded = _useState2[1];\n\n  const _useContext = useContext(UserContext),\n        context = _useContext.context,\n        setContext = _useContext.setContext;\n\n  let bgColor = \"transparent\";\n\n  if (expanded) {\n    if (md_size_memo) {\n      bgColor = \"rgba(0,0,0,0.1)\";\n    } else {\n      bgColor = \"transparent\"; //\"rgba(0,0,0,0.05)\"\n    }\n  }\n\n  return React.createElement(Grid, {\n    item: true,\n    className: classes.mainItem,\n    onClick: () => history.push(\"/user/\".concat(user._id)),\n    style: {\n      backgroundColor: bgColor\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    alignItems: \"center\",\n    className: classes.mainSolidLine,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    className: classes.itemAvatar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(Avatar, {\n    className: classes.avatarUser,\n    src: user.picture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  })))), React.createElement(Grid, {\n    item: true,\n    xs: 8,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"body2\",\n    align: \"left\",\n    className: classes.mainHeader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, useHighlitedSearchString({\n    string: user.name,\n    searchText: searchText\n  }).map(item => item))), React.createElement(AverageRatingStars, {\n    userId: user._id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"body2\",\n    align: \"left\",\n    className: classes.countdown,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, useHighlitedSearchString({\n    string: user.description,\n    searchText: searchText\n  }).map(item => item)))))));\n}\nconst useStyles = makeStyles(theme => ({\n  mainItem: {\n    width: \"100%\",\n    borderBottom: \"1px solid lightGrey\"\n  },\n  mainSolidLine: {\n    marginTop: 10,\n    marginBottom: 20\n  },\n  mainHeader: {\n    fontSize: 16\n  },\n  avatarUser: {\n    backgroundColor: red[500],\n    height: 80,\n    width: 80,\n    border: \"1px solid white\"\n  },\n  btnContainer: {\n    marginBottom: 5,\n    marginTop: 10\n  },\n  highlited: {\n    backgroundColor: \"yellow\"\n  },\n  textFieldCont: {\n    margin: 10\n  },\n  btnWrapLeft: {\n    borderRight: \"1px solid #707070\"\n  },\n  btn: {// height: 50,\n    // width: \"50%\"\n  },\n  itemAvatar: {},\n  mainAvatar: {\n    height: 90,\n    width: 90\n  },\n  btnAvatar: {\n    height: 20,\n    width: 20\n  },\n  thisLine: {\n    height: \"1px\",\n    width: \"100%\",\n    marginTop: \"2px\",\n    backgroundColor: \"#707070\"\n  }\n}));","map":{"version":3,"sources":["/Users/petrhoskovec/Desktop/code/Charlie2.0-renew/Charlie2.0/client/src/Atoms/Search/UserResult.js"],"names":["React","useState","useRef","useContext","useEffect","makeStyles","Grid","Avatar","Typography","red","withRouter","useHistory","NavLink","useXsSize","useHighlitedSearchString","UserContext","AverageRatingStars","UserResult","user","searchText","classes","useStyles","history","xs_size_memo","md_size_memo","expanded","setExpanded","context","setContext","bgColor","mainItem","push","_id","backgroundColor","mainSolidLine","itemAvatar","avatarUser","picture","mainHeader","string","name","map","item","countdown","description","theme","width","borderBottom","marginTop","marginBottom","fontSize","height","border","btnContainer","highlited","textFieldCont","margin","btnWrapLeft","borderRight","btn","mainAvatar","btnAvatar","thisLine"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useContext, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport { red } from \"@material-ui/core/colors\";\n\nimport { withRouter, useHistory, NavLink } from \"react-router-dom\";\n\nimport { useXsSize } from \"src/Hooks/useXsSize\";\nimport { useHighlitedSearchString } from \"src/Hooks/useHighlitedSearchString\";\nimport { UserContext } from \"src/userContext\";\nimport AverageRatingStars from \"src/Atoms/AverageRatingStars\";\n\nexport default function UserResult({ user, searchText }) {\n  const classes = useStyles();\n  let history = useHistory();\n  const { xs_size_memo, md_size_memo } = useXsSize(); \n  const [expanded, setExpanded] = useState(false);\n  const { context, setContext } = useContext(UserContext);\n\n  let bgColor = \"transparent\"\n  if(expanded){\n    if(md_size_memo){\n        bgColor = \"rgba(0,0,0,0.1)\"\n    } else {\n        bgColor = \"transparent\" //\"rgba(0,0,0,0.05)\"\n        }\n    }\n\n  return (\n    <Grid\n      item\n      className={classes.mainItem}\n      onClick={() => history.push(`/user/${user._id}`)}\n      style={{ backgroundColor: bgColor }}\n    >\n      <Grid\n        container\n        alignItems=\"center\"\n        className={classes.mainSolidLine}\n      >\n        <Grid item xs={4}>\n          <Grid container justify=\"center\">\n            <Grid item className={classes.itemAvatar}>\n                <Avatar className={classes.avatarUser} src={user.picture} />\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Grid item xs={8}>\n          <Typography\n            variant=\"body2\"\n            align=\"left\"\n            className={classes.mainHeader}\n          >\n            <b>{useHighlitedSearchString({string: user.name, searchText: searchText}).map(item => item)}</b>\n          </Typography>\n          <AverageRatingStars userId={user._id}/>\n          <Grid container>\n            <Grid item xs={12}>\n                <Typography\n                    variant=\"body2\"\n                    align=\"left\"\n                    className={classes.countdown}\n                >\n                    {useHighlitedSearchString({string: user.description, searchText: searchText}).map(item => item)}\n                </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n        </Grid>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  mainItem: {\n    width: \"100%\",\n    borderBottom: \"1px solid lightGrey\"\n  },\n  mainSolidLine: {\n    marginTop: 10,\n    marginBottom: 20\n  },\n  mainHeader: {\n    fontSize: 16,\n  },\n  avatarUser: {\n    backgroundColor: red[500],\n    height: 80,\n    width: 80,\n    border: \"1px solid white\"\n  },\n  btnContainer: {\n    marginBottom: 5,\n    marginTop: 10\n  },\n  highlited: {\n    backgroundColor: \"yellow\"\n  },\n  textFieldCont: {\n    margin: 10\n  },\n  btnWrapLeft: {\n    borderRight: \"1px solid #707070\"\n  },\n  btn: {\n    // height: 50,\n    // width: \"50%\"\n  },\n  itemAvatar: {\n\n  },\n  mainAvatar: {\n    height: 90,\n    width: 90\n  },\n  btnAvatar: {\n    height: 20,\n    width: 20\n  },\n  thisLine: {\n    height: \"1px\",\n    width: \"100%\",\n    marginTop: \"2px\",\n    backgroundColor: \"#707070\"\n  }\n}));\n"]},"metadata":{},"sourceType":"module"}