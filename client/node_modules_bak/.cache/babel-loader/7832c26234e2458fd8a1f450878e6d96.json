{"ast":null,"code":"import _slicedToArray from \"/Users/petrhoskovec/Desktop/code/Charlie2.0-renew/Charlie2.0/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/petrhoskovec/Desktop/code/Charlie2.0-renew/Charlie2.0/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/petrhoskovec/Desktop/code/Charlie2.0-renew/Charlie2.0/client/src/Molecules/event/ModalRate.js\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  query showMyRatingOfEvent(\\n    $event_id: ID!\\n    $guest_id: ID!\\n  ) {\\n    showMyRatingOfEvent(\\n      event_id: $event_id\\n      guest_id: $guest_id\\n    ) {\\n      success\\n      ratingValue\\n      message\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation rateEvent(\\n    $event_id: ID!\\n    $host_id: ID!\\n    $guest_id: ID!\\n    $ratingValue: Int!\\n    $message: String\\n  ) {\\n    rateEvent(\\n      event_id: $event_id\\n      host_id: $host_id\\n      guest_id: $guest_id\\n      ratingValue: $ratingValue\\n      message: $message\\n    ) {\\n      success\\n      ratingValue\\n      message\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useContext } from \"react\";\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Fade from \"@material-ui/core/Fade\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport GradeIcon from '@material-ui/icons/Grade';\nimport Chip from '@material-ui/core/Chip';\nimport StarRatingComponent from \"react-star-rating-component\";\nimport { withRouter } from \"react-router-dom\";\nimport gql from \"graphql-tag\";\nimport { EVENT_RATINGS } from \"src/Services/GQL/EVENT_RATINGS\";\nimport { UserContext } from \"src/userContext\";\nimport Spinner from \"src/Atoms/Spinner\";\nconst RATE_EVENT = gql(_templateObject());\nconst MY_RATINGS_OF_EVENT = gql(_templateObject2());\n\nfunction ModalRate({\n  event,\n  match\n}) {\n  const classes = useStyles();\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        open = _useState2[0],\n        setOpen = _useState2[1];\n\n  const _useState3 = useState(\"You rock!\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        message = _useState4[0],\n        setMessage = _useState4[1];\n\n  const _useState5 = useState(3),\n        _useState6 = _slicedToArray(_useState5, 2),\n        stars = _useState6[0],\n        setStars = _useState6[1];\n\n  const _useContext = useContext(UserContext),\n        context = _useContext.context;\n\n  const _useMutation = useMutation(RATE_EVENT),\n        _useMutation2 = _slicedToArray(_useMutation, 2),\n        rateEvent = _useMutation2[0],\n        rateEventState = _useMutation2[1];\n\n  const _useQuery = useQuery(MY_RATINGS_OF_EVENT, {\n    variables: {\n      event_id: event._id,\n      guest_id: context._id\n    }\n  }),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data,\n        refetch = _useQuery.refetch;\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  }; // const onStarClick = (nextValue, prevValue, name) => {\n  //   setStars(nextValue);\n  // };\n\n\n  const handleRateEvent = () => {\n    rateEvent({\n      variables: {\n        event_id: event._id,\n        host_id: event.author._id,\n        guest_id: context._id,\n        ratingValue: stars,\n        message: message\n      },\n      refetchQueries: () => [{\n        query: EVENT_RATINGS,\n        variables: {\n          event_id: match.params.id\n        }\n      }, {\n        query: MY_RATINGS_OF_EVENT,\n        variables: {\n          event_id: event.id,\n          guest_id: context._id\n        }\n      }]\n    });\n  };\n\n  if (rateEventState.data && rateEventState.data.rateEvent.success) {\n    setTimeout(() => {\n      handleClose();\n    }, 1000);\n  }\n\n  return React.createElement(Grid, {\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, data && data.showMyRatingOfEvent.length === 0 && React.createElement(Chip, {\n    label: \"RATE this event\",\n    icon: React.createElement(GradeIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }),\n    color: \"secondary\",\n    className: classes.chipOne,\n    onClick: handleOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }), data && data.showMyRatingOfEvent.length != 0 && React.createElement(Chip, {\n    label: \"You already rated this event\",\n    icon: React.createElement(GradeIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }),\n    color: \"primary\",\n    disabled: true,\n    className: classes.chipOne,\n    onClick: handleOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }), React.createElement(Modal, {\n    \"aria-labelledby\": \"transition-modal-title\",\n    \"aria-describedby\": \"transition-modal-description\",\n    className: classes.modal,\n    open: open,\n    onClose: handleClose,\n    closeAfterTransition: true,\n    BackdropComponent: Backdrop,\n    BackdropProps: {\n      timeout: 500\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(Fade, {\n    in: open,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.paper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, rateEventState.loading && React.createElement(Spinner, {\n    height: 100,\n    width: 100,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }), rateEventState.data && rateEventState.data.rateEvent.success && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, \"Finished, success\"), rateEventState.data && !rateEventState.data.rateEvent.success && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, \"Finished, FAIL\"), !rateEventState.loading && !rateEventState.data && React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n    id: \"transition-modal-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, \"Rate host of this event\"), React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    direction: \"column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(StarRatingComponent, {\n    name: String\n    /* name of the radio input, it is required */\n    ,\n    className: classes.starContainer,\n    value: stars\n    /* number of selected icon (`0` - none, `1` - first) */\n    ,\n    starCount: 5\n    /* number of icons in rating, default `5` */\n    ,\n    starColor: \"#E8045D\"\n    /* color of selected icons, default `#ffb400` */\n    ,\n    emptyStarColor: \"#999\"\n    /* color of non-selected icons, default `#333` */\n    ,\n    editing: true\n    /* is component available for editing, default `true` */\n    ,\n    onStarClick: (nextValue, prevValue, name) => {\n      setStars(nextValue);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    className: classes.root,\n    noValidate: true,\n    autoComplete: \"off\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    id: \"outlined-basic\",\n    label: \"Comment\",\n    variant: \"outlined\",\n    multiline: true,\n    rows: 4,\n    value: message,\n    onChange: e => {\n      setMessage(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  })))), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: e => {\n      e.preventDefault();\n      handleClose();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, \"CLOSE\")), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: e => {\n      e.preventDefault();\n      handleRateEvent();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, \"SEND RATING\")))))))));\n}\n\nconst useStyles = makeStyles(theme => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3)\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: 200\n    }\n  },\n  starContainer: {\n    fontSize: 30\n  },\n  trueBtn: {\n    width: \"100%\",\n    height: 60,\n    borderRadius: 0\n  },\n  chipOne: {\n    width: \"90%\",\n    fontWeight: 500,\n    fontSize: 25,\n    padding: 20,\n    margin: \"5%\"\n  }\n}));\nexport default withRouter(ModalRate);","map":{"version":3,"sources":["/Users/petrhoskovec/Desktop/code/Charlie2.0-renew/Charlie2.0/client/src/Molecules/event/ModalRate.js"],"names":["React","useState","useContext","useMutation","useQuery","makeStyles","Grid","Modal","Backdrop","Fade","TextField","Button","GradeIcon","Chip","StarRatingComponent","withRouter","gql","EVENT_RATINGS","UserContext","Spinner","RATE_EVENT","MY_RATINGS_OF_EVENT","ModalRate","event","match","classes","useStyles","open","setOpen","message","setMessage","stars","setStars","context","rateEvent","rateEventState","variables","event_id","_id","guest_id","loading","error","data","refetch","handleOpen","handleClose","handleRateEvent","host_id","author","ratingValue","refetchQueries","query","params","id","success","setTimeout","showMyRatingOfEvent","length","chipOne","modal","timeout","paper","String","starContainer","nextValue","prevValue","name","root","e","target","value","preventDefault","theme","display","alignItems","justifyContent","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","margin","width","fontSize","trueBtn","height","borderRadius","fontWeight"],"mappings":"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","sourcesContent":["import React, {useState, useContext} from \"react\";\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Fade from \"@material-ui/core/Fade\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport GradeIcon from '@material-ui/icons/Grade';\nimport Chip from '@material-ui/core/Chip';\nimport StarRatingComponent from \"react-star-rating-component\";\n\nimport { withRouter } from \"react-router-dom\";\nimport gql from \"graphql-tag\";\n\nimport { EVENT_RATINGS } from \"src/Services/GQL/EVENT_RATINGS\";\nimport { UserContext } from \"src/userContext\";\n\nimport Spinner from \"src/Atoms/Spinner\";\n\nconst RATE_EVENT = gql`\n  mutation rateEvent(\n    $event_id: ID!\n    $host_id: ID!\n    $guest_id: ID!\n    $ratingValue: Int!\n    $message: String\n  ) {\n    rateEvent(\n      event_id: $event_id\n      host_id: $host_id\n      guest_id: $guest_id\n      ratingValue: $ratingValue\n      message: $message\n    ) {\n      success\n      ratingValue\n      message\n    }\n  }\n`;\n\nconst MY_RATINGS_OF_EVENT = gql`\n  query showMyRatingOfEvent(\n    $event_id: ID!\n    $guest_id: ID!\n  ) {\n    showMyRatingOfEvent(\n      event_id: $event_id\n      guest_id: $guest_id\n    ) {\n      success\n      ratingValue\n      message\n    }\n  }\n`;\n\nfunction ModalRate({event, match}) {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [message, setMessage] = useState(\"You rock!\");\n  const [stars, setStars] = useState(3);\n  const { context } = useContext(UserContext);\n\n  const [rateEvent, rateEventState] = useMutation(RATE_EVENT);\n  const { loading, error, data, refetch } = useQuery(MY_RATINGS_OF_EVENT, {\n    variables: { event_id: event._id,\n                  guest_id: context._id}\n  });\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  // const onStarClick = (nextValue, prevValue, name) => {\n  //   setStars(nextValue);\n  // };\n\n  const handleRateEvent = () => {\n    rateEvent({\n      variables: {\n        event_id: event._id,\n        host_id: event.author._id,\n        guest_id: context._id,\n        ratingValue: stars,\n        message: message\n      },\n      refetchQueries: () => [\n        {\n          query: EVENT_RATINGS,\n          variables: { event_id: match.params.id }\n        },\n        {\n          query: MY_RATINGS_OF_EVENT,\n          variables: {  event_id: event.id,\n                        guest_id: context._id}\n        }\n      ]\n    });\n  }\n\n\n  if (rateEventState.data && rateEventState.data.rateEvent.success) {\n    setTimeout(() => {\n      handleClose();\n    }, 1000);\n  }\n\n  return (\n    <Grid xs={12}>\n      {data && data.showMyRatingOfEvent.length === 0 && <Chip \n        label={`RATE this event`} \n        icon={<GradeIcon />}\n        color=\"secondary\" \n        className={classes.chipOne} \n        onClick={handleOpen}\n          />}\n      {data && data.showMyRatingOfEvent.length != 0 && <Chip \n        label={`You already rated this event`} \n        icon={<GradeIcon />}\n        color=\"primary\" \n        disabled={true}\n        className={classes.chipOne} \n        onClick={handleOpen}\n          />}\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        className={classes.modal}\n        open={open}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500\n        }}\n      >\n        <Fade in={open}>\n          <div className={classes.paper}>\n            {rateEventState.loading && <Spinner height={100} width={100} />}\n            {rateEventState.data && rateEventState.data.rateEvent.success && (\n              <div>Finished, success</div>\n            )}\n            {rateEventState.data && !rateEventState.data.rateEvent.success && (\n              <div>Finished, FAIL</div>\n            )}\n            {!rateEventState.loading && !rateEventState.data && (\n              <>\n                <h2 id=\"transition-modal-title\">Rate host of this event</h2>\n                <Grid\n                  container\n                  justify=\"center\"\n                  alignItems=\"center\"\n                  direction=\"column\"\n                >\n                  <Grid item>\n                    <StarRatingComponent\n                      name={\n                        String\n                      } /* name of the radio input, it is required */\n                      className={classes.starContainer}\n                      value={\n                        stars\n                      } /* number of selected icon (`0` - none, `1` - first) */\n                      starCount={5} /* number of icons in rating, default `5` */\n                      starColor={\n                        \"#E8045D\"\n                      } /* color of selected icons, default `#ffb400` */\n                      emptyStarColor={\n                        \"#999\"\n                      } /* color of non-selected icons, default `#333` */\n                      editing={\n                        true\n                      } /* is component available for editing, default `true` */\n                      onStarClick={(nextValue, prevValue, name) => {\n                        setStars(nextValue);\n                      }}\n                    />\n                  </Grid>\n                  <Grid item>\n                    <form\n                      className={classes.root}\n                      noValidate\n                      autoComplete=\"off\"\n                    >\n                      <TextField\n                        id=\"outlined-basic\"\n                        label=\"Comment\"\n                        variant=\"outlined\"\n                        multiline={true}\n                        rows={4}\n                        value={message}\n                        onChange={e => {\n                          setMessage(e.target.value);\n                        }}\n                      />\n                    </form>\n                  </Grid>\n                </Grid>\n                <Grid item>\n                  <Grid container spacing={2}>\n                    <Grid item>\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={e => {\n                          e.preventDefault();\n                          handleClose();\n                        }}\n                      >\n                        CLOSE\n                      </Button>\n                    </Grid>\n                    <Grid item>\n                      <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        onClick={e => {\n                          e.preventDefault();\n                          handleRateEvent()\n                        }}\n                        >\n                          SEND RATING\n                        </Button>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </>\n            )}\n          </div>\n        </Fade>\n      </Modal>\n    </Grid>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3)\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: 200\n    }\n  },\n  starContainer: {\n    fontSize: 30\n  },\n  trueBtn: {\n    width: \"100%\",\n    height: 60,\n    borderRadius: 0\n  },\n  chipOne: {\n    width: \"90%\", \n    fontWeight: 500, \n    fontSize: 25, \n    padding: 20, \n    margin: \"5%\"\n  },\n}));\n\nexport default withRouter(ModalRate);\n"]},"metadata":{},"sourceType":"module"}