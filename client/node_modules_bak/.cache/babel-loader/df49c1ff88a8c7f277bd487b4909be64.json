{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n/**\n * The 'src' argument plays the command role.\n * The returned values is always of the same type as the 'src'.\n * @param dst\n * @param src\n * @returns {*}\n */\n\nfunction mergeOne(dst, src) {\n  if (src === undefined) {\n    return dst;\n  } // According to specification arrays must be concatenated.\n  // Also, the '.concat' creates a new array instance. Overrides the 'dst'.\n\n\n  if (isArray(src)) {\n    return (isArray(dst) ? dst : []).concat(src);\n  } // Now deal with non plain 'src' object. 'src' overrides 'dst'\n  // Note that functions are also assigned! We do not deep merge functions.\n\n\n  if (!isPlainObject(src)) {\n    return src;\n  } // See if 'dst' is allowed to be mutated. If not - it's overridden with a new plain object.\n\n\n  var returnValue = isObject(dst) ? dst : {};\n  var keys = Object.keys(src);\n\n  for (var i = 0; i < keys.length; i += 1) {\n    var key = keys[i];\n    var srcValue = src[key]; // Do not merge properties with the 'undefined' value.\n\n    if (srcValue !== undefined) {\n      var dstValue = returnValue[key]; // Recursive calls to mergeOne() must allow only plain objects or arrays in dst\n\n      var newDst = isPlainObject(dstValue) || isArray(srcValue) ? dstValue : {}; // deep merge each property. Recursion!\n\n      returnValue[key] = mergeOne(newDst, srcValue);\n    }\n  }\n\n  return returnValue;\n}\n\nvar merge = function (dst) {\n  var srcs = [],\n      len = arguments.length - 1;\n\n  while (len-- > 0) srcs[len] = arguments[len + 1];\n\n  return srcs.reduce(mergeOne, dst);\n};\n\nfunction isFunction(obj) {\n  return typeof obj === 'function';\n}\n\nfunction isObject(obj) {\n  var type = typeof obj;\n  return !!obj && (type === 'object' || type === 'function');\n}\n\nvar assign = Object.assign || function assign(to) {\n  var args = arguments;\n\n  for (var s = 1; s < args.length; s += 1) {\n    var from = args[s];\n\n    if (from) {\n      var keys = Object.keys(from);\n\n      for (var i = 0; i < keys.length; i += 1) {\n        var key = keys[i];\n        to[key] = from[key];\n      }\n    }\n  }\n\n  return to;\n};\n\nvar isArray = Array.isArray;\n\nfunction isPlainObject(value) {\n  return !!value && typeof value === 'object' && Object.getPrototypeOf(value) === Object.prototype;\n}\n\nvar concat = Array.prototype.concat;\n\nfunction extractFunctions() {\n  var fns = concat.apply([], arguments).filter(isFunction);\n  return fns.length === 0 ? undefined : fns;\n}\n\nfunction concatAssignFunctions(dstObject, srcArray, propName) {\n  if (!isArray(srcArray)) {\n    return;\n  }\n\n  var length = srcArray.length;\n  var dstArray = dstObject[propName] || [];\n  dstObject[propName] = dstArray;\n\n  for (var i = 0; i < length; i += 1) {\n    var fn = srcArray[i];\n\n    if (isFunction(fn) && dstArray.indexOf(fn) < 0) {\n      dstArray.push(fn);\n    }\n  }\n}\n\nfunction combineProperties(dstObject, srcObject, propName, action) {\n  if (!isObject(srcObject[propName])) {\n    return;\n  }\n\n  if (!isObject(dstObject[propName])) {\n    dstObject[propName] = {};\n  }\n\n  action(dstObject[propName], srcObject[propName]);\n}\n\nfunction deepMergeAssign(dstObject, srcObject, propName) {\n  combineProperties(dstObject, srcObject, propName, merge);\n}\n\nfunction mergeAssign(dstObject, srcObject, propName) {\n  combineProperties(dstObject, srcObject, propName, assign);\n}\n/**\n * Converts stampit extended descriptor to a standard one.\n * @param [methods]\n * @param [properties]\n * @param [props]\n * @param [refs]\n * @param [initializers]\n * @param [init]\n * @param [deepProperties]\n * @param [deepProps]\n * @param [propertyDescriptors]\n * @param [staticProperties]\n * @param [statics]\n * @param [staticDeepProperties]\n * @param [deepStatics]\n * @param [staticPropertyDescriptors]\n * @param [configuration]\n * @param [conf]\n * @param [deepConfiguration]\n * @param [deepConf]\n * @param [composers]\n * @returns {Descriptor}\n */\n\n\nvar standardiseDescriptor = function (ref) {\n  if (ref === void 0) ref = {};\n  var methods = ref.methods;\n  var properties = ref.properties;\n  var props = ref.props;\n  var refs = ref.refs;\n  var initializers = ref.initializers;\n  var init = ref.init;\n  var composers = ref.composers;\n  var deepProperties = ref.deepProperties;\n  var deepProps = ref.deepProps;\n  var propertyDescriptors = ref.propertyDescriptors;\n  var staticProperties = ref.staticProperties;\n  var statics = ref.statics;\n  var staticDeepProperties = ref.staticDeepProperties;\n  var deepStatics = ref.deepStatics;\n  var staticPropertyDescriptors = ref.staticPropertyDescriptors;\n  var configuration = ref.configuration;\n  var conf = ref.conf;\n  var deepConfiguration = ref.deepConfiguration;\n  var deepConf = ref.deepConf;\n  var p = isObject(props) || isObject(refs) || isObject(properties) ? assign({}, props, refs, properties) : undefined;\n  var dp = isObject(deepProps) ? merge({}, deepProps) : undefined;\n  dp = isObject(deepProperties) ? merge(dp, deepProperties) : dp;\n  var sp = isObject(statics) || isObject(staticProperties) ? assign({}, statics, staticProperties) : undefined;\n  var dsp = isObject(deepStatics) ? merge({}, deepStatics) : undefined;\n  dsp = isObject(staticDeepProperties) ? merge(dsp, staticDeepProperties) : dsp;\n  var c = isObject(conf) || isObject(configuration) ? assign({}, conf, configuration) : undefined;\n  var dc = isObject(deepConf) ? merge({}, deepConf) : undefined;\n  dc = isObject(deepConfiguration) ? merge(dc, deepConfiguration) : dc;\n  var ii = extractFunctions(init, initializers);\n  var composerFunctions = extractFunctions(composers);\n\n  if (composerFunctions) {\n    dc = dc || {};\n    concatAssignFunctions(dc, composerFunctions, 'composers');\n  }\n\n  var descriptor = {};\n\n  if (methods) {\n    descriptor.methods = methods;\n  }\n\n  if (p) {\n    descriptor.properties = p;\n  }\n\n  if (ii) {\n    descriptor.initializers = ii;\n  }\n\n  if (dp) {\n    descriptor.deepProperties = dp;\n  }\n\n  if (sp) {\n    descriptor.staticProperties = sp;\n  }\n\n  if (methods) {\n    descriptor.methods = methods;\n  }\n\n  if (dsp) {\n    descriptor.staticDeepProperties = dsp;\n  }\n\n  if (propertyDescriptors) {\n    descriptor.propertyDescriptors = propertyDescriptors;\n  }\n\n  if (staticPropertyDescriptors) {\n    descriptor.staticPropertyDescriptors = staticPropertyDescriptors;\n  }\n\n  if (c) {\n    descriptor.configuration = c;\n  }\n\n  if (dc) {\n    descriptor.deepConfiguration = dc;\n  }\n\n  return descriptor;\n};\n/**\n * Creates new factory instance.\n * @param {Descriptor} descriptor The information about the object the factory will be creating.\n * @returns {Function} The new factory function.\n */\n\n\nfunction createFactory(descriptor) {\n  return function Stamp(options) {\n    var args = [],\n        len = arguments.length - 1;\n\n    while (len-- > 0) args[len] = arguments[len + 1]; // Next line was optimized for most JS VMs. Please, be careful here!\n\n\n    var obj = Object.create(descriptor.methods || null);\n    merge(obj, descriptor.deepProperties);\n    assign(obj, descriptor.properties);\n    Object.defineProperties(obj, descriptor.propertyDescriptors || {});\n\n    if (!descriptor.initializers || descriptor.initializers.length === 0) {\n      return obj;\n    }\n\n    if (options === undefined) {\n      options = {};\n    }\n\n    var inits = descriptor.initializers;\n    var length = inits.length;\n\n    for (var i = 0; i < length; i += 1) {\n      var initializer = inits[i];\n\n      if (isFunction(initializer)) {\n        var returnedValue = initializer.call(obj, options, {\n          instance: obj,\n          stamp: Stamp,\n          args: [options].concat(args)\n        });\n        obj = returnedValue === undefined ? obj : returnedValue;\n      }\n    }\n\n    return obj;\n  };\n}\n/**\n * Returns a new stamp given a descriptor and a compose function implementation.\n * @param {Descriptor} [descriptor={}] The information about the object the stamp will be creating.\n * @param {Compose} composeFunction The \"compose\" function implementation.\n * @returns {Stamp}\n */\n\n\nfunction createStamp(descriptor, composeFunction) {\n  var Stamp = createFactory(descriptor);\n  merge(Stamp, descriptor.staticDeepProperties);\n  assign(Stamp, descriptor.staticProperties);\n  Object.defineProperties(Stamp, descriptor.staticPropertyDescriptors || {});\n  var composeImplementation = isFunction(Stamp.compose) ? Stamp.compose : composeFunction;\n\n  Stamp.compose = function _compose() {\n    var args = [],\n        len = arguments.length;\n\n    while (len--) args[len] = arguments[len];\n\n    return composeImplementation.apply(this, args);\n  };\n\n  assign(Stamp.compose, descriptor);\n  return Stamp;\n}\n/**\n * Mutates the dstDescriptor by merging the srcComposable data into it.\n * @param {Descriptor} dstDescriptor The descriptor object to merge into.\n * @param {Composable} [srcComposable] The composable\n * (either descriptor or stamp) to merge data form.\n * @returns {Descriptor} Returns the dstDescriptor argument.\n */\n\n\nfunction mergeComposable(dstDescriptor, srcComposable) {\n  var srcDescriptor = srcComposable && srcComposable.compose || srcComposable;\n\n  if (!isObject(srcDescriptor)) {\n    return dstDescriptor;\n  }\n\n  mergeAssign(dstDescriptor, srcDescriptor, 'methods');\n  mergeAssign(dstDescriptor, srcDescriptor, 'properties');\n  deepMergeAssign(dstDescriptor, srcDescriptor, 'deepProperties');\n  mergeAssign(dstDescriptor, srcDescriptor, 'propertyDescriptors');\n  mergeAssign(dstDescriptor, srcDescriptor, 'staticProperties');\n  deepMergeAssign(dstDescriptor, srcDescriptor, 'staticDeepProperties');\n  mergeAssign(dstDescriptor, srcDescriptor, 'staticPropertyDescriptors');\n  mergeAssign(dstDescriptor, srcDescriptor, 'configuration');\n  deepMergeAssign(dstDescriptor, srcDescriptor, 'deepConfiguration');\n  concatAssignFunctions(dstDescriptor, srcDescriptor.initializers, 'initializers');\n  return dstDescriptor;\n}\n/**\n * Given the list of composables (stamp descriptors and stamps) returns\n * a new stamp (composable factory function).\n * @typedef {Function} Compose\n * @param {...(Composable)} [composables] The list of composables.\n * @returns {Stamp} A new stamp (aka composable factory function)\n */\n\n\nfunction compose() {\n  var composables = [],\n      len = arguments.length;\n\n  while (len--) composables[len] = arguments[len];\n\n  var descriptor = [this].concat(composables).filter(isObject).reduce(mergeComposable, {});\n  return createStamp(descriptor, compose);\n}\n/**\n * The Stamp Descriptor\n * @typedef {Function|Object} Descriptor\n * @returns {Stamp} A new stamp based on this Stamp\n * @property {Object} [methods] Methods or other data used as object instances' prototype\n * @property {Array<Function>} [initializers] List of initializers called for each object instance\n * @property {Object} [properties] Shallow assigned properties of object instances\n * @property {Object} [deepProperties] Deeply merged properties of object instances\n * @property {Object} [staticProperties] Shallow assigned properties of Stamps\n * @property {Object} [staticDeepProperties] Deeply merged properties of Stamps\n * @property {Object} [configuration] Shallow assigned properties of Stamp arbitrary metadata\n * @property {Object} [deepConfiguration] Deeply merged properties of Stamp arbitrary metadata\n * @property {Object} [propertyDescriptors] ES5 Property Descriptors applied to object instances\n * @property {Object} [staticPropertyDescriptors] ES5 Property Descriptors applied to Stamps\n */\n\n/**\n * The Stamp factory function\n * @typedef {Function} Stamp\n * @returns {*} Instantiated object\n * @property {Descriptor} compose - The Stamp descriptor and composition function\n */\n\n/**\n * A composable object - stamp or descriptor\n * @typedef {Stamp|Descriptor} Composable\n */\n\n/**\n * Returns true if argument is a stamp.\n * @param {*} obj\n * @returns {Boolean}\n */\n\n\nfunction isStamp(obj) {\n  return isFunction(obj) && isFunction(obj.compose);\n}\n\nfunction createUtilityFunction(propName, action) {\n  return function composeUtil() {\n    var i = arguments.length,\n        argsArray = Array(i);\n\n    while (i--) argsArray[i] = arguments[i];\n\n    return (this && this.compose || stampit).call(this, (obj = {}, obj[propName] = action.apply(void 0, [{}].concat(argsArray)), obj));\n    var obj;\n  };\n}\n\nvar methods = createUtilityFunction('methods', assign);\nvar properties = createUtilityFunction('properties', assign);\n\nfunction initializers() {\n  var args = [],\n      len = arguments.length;\n\n  while (len--) args[len] = arguments[len];\n\n  return (this && this.compose || stampit).call(this, {\n    initializers: extractFunctions.apply(void 0, args)\n  });\n}\n\nfunction composers() {\n  var args = [],\n      len = arguments.length;\n\n  while (len--) args[len] = arguments[len];\n\n  return (this && this.compose || stampit).call(this, {\n    composers: extractFunctions.apply(void 0, args)\n  });\n}\n\nvar deepProperties = createUtilityFunction('deepProperties', merge);\nvar staticProperties = createUtilityFunction('staticProperties', assign);\nvar staticDeepProperties = createUtilityFunction('staticDeepProperties', merge);\nvar configuration = createUtilityFunction('configuration', assign);\nvar deepConfiguration = createUtilityFunction('deepConfiguration', merge);\nvar propertyDescriptors = createUtilityFunction('propertyDescriptors', assign);\nvar staticPropertyDescriptors = createUtilityFunction('staticPropertyDescriptors', assign);\nvar allUtilities = {\n  methods: methods,\n  properties: properties,\n  refs: properties,\n  props: properties,\n  initializers: initializers,\n  init: initializers,\n  composers: composers,\n  deepProperties: deepProperties,\n  deepProps: deepProperties,\n  staticProperties: staticProperties,\n  statics: staticProperties,\n  staticDeepProperties: staticDeepProperties,\n  deepStatics: staticDeepProperties,\n  configuration: configuration,\n  conf: configuration,\n  deepConfiguration: deepConfiguration,\n  deepConf: deepConfiguration,\n  propertyDescriptors: propertyDescriptors,\n  staticPropertyDescriptors: staticPropertyDescriptors\n};\n/**\n * Infected stamp. Used as a storage of the infection metadata\n * @type {Function}\n * @return {Stamp}\n */\n\nvar baseStampit = compose({\n  staticProperties: allUtilities\n}, {\n  staticProperties: {\n    create: function create() {\n      var args = [],\n          len = arguments.length;\n\n      while (len--) args[len] = arguments[len];\n\n      return this.apply(void 0, args);\n    },\n    compose: stampit // infecting\n\n  }\n});\n/**\n * Infected compose\n * @param {...(Composable)} [args] The list of composables.\n * @return {Stamp}\n */\n\nfunction stampit() {\n  var args = [],\n      len = arguments.length;\n\n  while (len--) args[len] = arguments[len];\n\n  var composables = args.filter(isObject).map(function (arg) {\n    return isStamp(arg) ? arg : standardiseDescriptor(arg);\n  }); // Calling the standard pure compose function here.\n\n  var stamp = compose.apply(this || baseStampit, composables);\n  var composerFunctions = stamp.compose.deepConfiguration && stamp.compose.deepConfiguration.composers;\n\n  if (isArray(composerFunctions) && composerFunctions.length > 0) {\n    var uniqueComposers = [];\n\n    for (var i = 0; i < composerFunctions.length; i += 1) {\n      var composer = composerFunctions[i];\n\n      if (isFunction(composer) && uniqueComposers.indexOf(composer) < 0) {\n        uniqueComposers.push(composer);\n      }\n    }\n\n    stamp.compose.deepConfiguration.composers = uniqueComposers;\n\n    if (isStamp(this)) {\n      composables.unshift(this);\n    }\n\n    for (var i$1 = 0; i$1 < uniqueComposers.length; i$1 += 1) {\n      var composer$1 = uniqueComposers[i$1];\n      var returnedValue = composer$1({\n        stamp: stamp,\n        composables: composables\n      });\n      stamp = isStamp(returnedValue) ? returnedValue : stamp;\n    }\n  }\n\n  return stamp;\n}\n\nvar exportedCompose = stampit.bind(); // bind to 'undefined'\n\nstampit.compose = exportedCompose; // Setting up the shortcut functions\n\nvar stampit$1 = assign(stampit, allUtilities);\nexports.methods = methods;\nexports.properties = properties;\nexports.refs = properties;\nexports.props = properties;\nexports.initializers = initializers;\nexports.init = initializers;\nexports.composers = composers;\nexports.deepProperties = deepProperties;\nexports.deepProps = deepProperties;\nexports.staticProperties = staticProperties;\nexports.statics = staticProperties;\nexports.staticDeepProperties = staticDeepProperties;\nexports.deepStatics = staticDeepProperties;\nexports.configuration = configuration;\nexports.conf = configuration;\nexports.deepConfiguration = deepConfiguration;\nexports.deepConf = deepConfiguration;\nexports.propertyDescriptors = propertyDescriptors;\nexports.staticPropertyDescriptors = staticPropertyDescriptors;\nexports.compose = exportedCompose;\nexports['default'] = stampit$1;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}