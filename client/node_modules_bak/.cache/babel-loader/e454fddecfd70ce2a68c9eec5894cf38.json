{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/petrhoskovec/Desktop/code/Charlie2.0/client/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/petrhoskovec/Desktop/code/Charlie2.0/client/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/petrhoskovec/Desktop/code/Charlie2.0/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/petrhoskovec/Desktop/code/Charlie2.0/client/node_modules/@babel/runtime/helpers/createClass\");\n\nfunction cameraName(label) {\n  var clean = label.replace(/\\s*\\([0-9a-f]+(:[0-9a-f]+)?\\)\\s*$/, '');\n  return clean || label || null;\n}\n\nvar Camera =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function Camera(id, name) {\n    _classCallCheck(this, Camera);\n\n    this.id = id;\n    this.name = name;\n    this._stream = null;\n  }\n\n  _createClass(Camera, [{\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var constraints;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                constraints = {\n                  audio: false,\n                  video: {\n                    mandatory: {\n                      sourceId: this.id,\n                      minWidth: 600,\n                      maxWidth: 800,\n                      minAspectRatio: 1.6\n                    },\n                    optional: []\n                  }\n                };\n                _context.next = 3;\n                return navigator.mediaDevices.getUserMedia(constraints);\n\n              case 3:\n                this._stream = _context.sent;\n                return _context.abrupt(\"return\", window.URL.createObjectURL(this._stream));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function start() {\n        return _start.apply(this, arguments);\n      }\n\n      return start;\n    }()\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!this._stream) {\n        return;\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this._stream.getVideoTracks()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var stream = _step.value;\n          stream.stop();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this._stream = null;\n    }\n  }], [{\n    key: \"getCameras\",\n    value: function () {\n      var _getCameras = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var devices;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return navigator.mediaDevices.enumerateDevices();\n\n              case 2:\n                devices = _context2.sent;\n                return _context2.abrupt(\"return\", devices.filter(function (d) {\n                  return d.kind === 'videoinput';\n                }).map(function (d) {\n                  return new Camera(d.deviceId, cameraName(d.label));\n                }));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getCameras() {\n        return _getCameras.apply(this, arguments);\n      }\n\n      return getCameras;\n    }()\n  }]);\n\n  return Camera;\n}();\n\nmodule.exports = Camera;","map":null,"metadata":{},"sourceType":"script"}