{"ast":null,"code":"import _slicedToArray from \"/Users/petrhoskovec/Desktop/code/Charlie2.0/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/petrhoskovec/Desktop/code/Charlie2.0/client/src/Hooks/useHighlitedSearchString.js\";\nimport React, { useState, useEffect } from \"react\";\nexport function useHighlitedSearchString({\n  string,\n  searchText\n}) {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        averageRating = _useState2[0],\n        setAverageRating = _useState2[1];\n\n  var regex = new RegExp(searchText, \"i\");\n  console.log(\"REGEX TEXTS: \", regex);\n  let resultStrArr = string.split(regex);\n  let newSearchText = searchText;\n  console.log(\"resultStrArr: \", resultStrArr);\n\n  if (resultStrArr.length === 1) {\n    console.log(\"FIRST SPILT NIC\");\n    const searchTxtArr = searchText.split(\" \");\n\n    for (var i = 0; i < searchTxtArr.length; i++) {\n      console.log(\"DEEP SPLIT\");\n      const regex = new RegExp(searchTxtArr[i], \"i\");\n      const deepSearchStringArr = resultStrArr[0].split(regex);\n\n      if (deepSearchStringArr.length != 1) {\n        resultStrArr = deepSearchStringArr;\n        newSearchText = searchTxtArr[i];\n        console.log(\"DEEP cutter: \", newSearchText);\n        break;\n      }\n    }\n  }\n\n  const processedStringMap = resultStrArr.map((subS, index) => {\n    return React.createElement(React.Fragment, null, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, subS), resultStrArr.length != index + 1 && React.createElement(\"span\", {\n      style: {\n        backgroundColor: \"yellow\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, newSearchText));\n  });\n  return processedStringMap;\n}","map":{"version":3,"sources":["/Users/petrhoskovec/Desktop/code/Charlie2.0/client/src/Hooks/useHighlitedSearchString.js"],"names":["React","useState","useEffect","useHighlitedSearchString","string","searchText","averageRating","setAverageRating","regex","RegExp","console","log","resultStrArr","split","newSearchText","length","searchTxtArr","i","deepSearchStringArr","processedStringMap","map","subS","index","backgroundColor"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAGA,OAAO,SAASC,wBAAT,CAAkC;AAACC,EAAAA,MAAD;AAASC,EAAAA;AAAT,CAAlC,EAAwD;AAAA,oBACpBJ,QAAQ,CAAC,CAAD,CADY;AAAA;AAAA,QACvDK,aADuD;AAAA,QACxCC,gBADwC;;AAG9D,MAAIC,KAAK,GAAG,IAAIC,MAAJ,CAAWJ,UAAX,EAAuB,GAAvB,CAAZ;AAEAK,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BH,KAA7B;AAGA,MAAII,YAAY,GAAGR,MAAM,CAACS,KAAP,CAAaL,KAAb,CAAnB;AACA,MAAIM,aAAa,GAAGT,UAApB;AAEAK,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BC,YAA9B;;AAEA,MAAGA,YAAY,CAACG,MAAb,KAAwB,CAA3B,EAA6B;AAC5BL,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,UAAMK,YAAY,GAAGX,UAAU,CAACQ,KAAX,CAAiB,GAAjB,CAArB;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,YAAY,CAACD,MAAjC,EAAyCE,CAAC,EAA1C,EAA8C;AAC7CP,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,YAAMH,KAAK,GAAG,IAAIC,MAAJ,CAAWO,YAAY,CAACC,CAAD,CAAvB,EAA4B,GAA5B,CAAd;AACA,YAAMC,mBAAmB,GAAGN,YAAY,CAAC,CAAD,CAAZ,CAAgBC,KAAhB,CAAsBL,KAAtB,CAA5B;;AACA,UAAIU,mBAAmB,CAACH,MAApB,IAA8B,CAAlC,EAAqC;AACpCH,QAAAA,YAAY,GAAGM,mBAAf;AACAJ,QAAAA,aAAa,GAAGE,YAAY,CAACC,CAAD,CAA5B;AACAP,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BG,aAA7B;AACC;AACD;AACC;AACH;;AAED,QAAMK,kBAAkB,GAAGP,YAAY,CAACQ,GAAb,CAAiB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAAC,WAC9D,0CAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOD,IAAP,CAAF,EACET,YAAY,CAACG,MAAb,IAAuBO,KAAK,GAAG,CAA/B,IACE;AAAM,MAAA,KAAK,EAAE;AAACC,QAAAA,eAAe,EAAE;AAAlB,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4CT,aAA5C,CAFJ,CAD8D;AAI5D,GAJyB,CAA3B;AAMD,SAAOK,kBAAP;AACC","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n\nexport function useHighlitedSearchString({string, searchText}) {\n\tconst [averageRating, setAverageRating] = useState(0)\n\n\tvar regex = new RegExp(searchText, \"i\");\n\n\tconsole.log(\"REGEX TEXTS: \", regex)\n\n\n\tlet resultStrArr = string.split(regex)\n\tlet newSearchText = searchText\n\n\tconsole.log(\"resultStrArr: \", resultStrArr)\n\n\tif(resultStrArr.length === 1){\n\t\tconsole.log(\"FIRST SPILT NIC\")\n\t\tconst searchTxtArr = searchText.split(\" \")\n\t\tfor (var i = 0; i < searchTxtArr.length; i++) {\n\t\t\tconsole.log(\"DEEP SPLIT\")\n\t\t\tconst regex = new RegExp(searchTxtArr[i], \"i\");\n\t\t\tconst deepSearchStringArr = resultStrArr[0].split(regex)\n\t\t\tif (deepSearchStringArr.length != 1) {\n\t\t\t\tresultStrArr = deepSearchStringArr;\n\t\t\t\tnewSearchText = searchTxtArr[i]\n\t\t\t\tconsole.log(\"DEEP cutter: \", newSearchText)\n\t\t\t  break;\n\t\t\t}\n\t\t  }\n\t}\n\n\tconst processedStringMap = resultStrArr.map((subS, index) => {return(\n\t<><span>{subS}</span>\n\t\t{resultStrArr.length != index + 1 \n\t\t&& <span style={{backgroundColor: \"yellow\"}} >{newSearchText}</span>}</>\n\t)})\n\nreturn processedStringMap\n}"]},"metadata":{},"sourceType":"module"}