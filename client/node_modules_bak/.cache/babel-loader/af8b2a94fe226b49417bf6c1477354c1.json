{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar _asap = require('asap');\n\nvar _asap2 = _interopRequireDefault(_asap);\n\nvar _generate = require('./generate');\n\nvar _util = require('./util'); // The current <style> tag we are inserting into, or null if we haven't\n// inserted anything yet. We could find this each time using\n// `document.querySelector(\"style[data-aphrodite\"])`, but holding onto it is\n// faster.\n\n\nvar styleTag = null; // Inject a string of styles into a <style> tag in the head of the document. This\n// will automatically create a style tag and then continue to use it for\n// multiple injections. It will also use a style tag with the `data-aphrodite`\n// tag on it if that exists in the DOM. This could be used for e.g. reusing the\n// same style tag that server-side rendering inserts.\n\nvar injectStyleTag = function injectStyleTag(cssContents) {\n  if (styleTag == null) {\n    // Try to find a style tag with the `data-aphrodite` attribute first.\n    styleTag = document.querySelector(\"style[data-aphrodite]\"); // If that doesn't work, generate a new style tag.\n\n    if (styleTag == null) {\n      // Taken from\n      // http://stackoverflow.com/questions/524696/how-to-create-a-style-tag-with-javascript\n      var head = document.head || document.getElementsByTagName('head')[0];\n      styleTag = document.createElement('style');\n      styleTag.type = 'text/css';\n      styleTag.setAttribute(\"data-aphrodite\", \"\");\n      head.appendChild(styleTag);\n    }\n  }\n\n  if (styleTag.styleSheet) {\n    styleTag.styleSheet.cssText += cssContents;\n  } else {\n    styleTag.appendChild(document.createTextNode(cssContents));\n  }\n}; // Custom handlers for stringifying CSS values that have side effects\n// (such as fontFamily, which can cause @font-face rules to be injected)\n\n\nvar stringHandlers = {\n  // With fontFamily we look for objects that are passed in and interpret\n  // them as @font-face rules that we need to inject. The value of fontFamily\n  // can either be a string (as normal), an object (a single font face), or\n  // an array of objects and strings.\n  fontFamily: function fontFamily(val) {\n    if (Array.isArray(val)) {\n      return val.map(fontFamily).join(\",\");\n    } else if (typeof val === \"object\") {\n      injectStyleOnce(val.fontFamily, \"@font-face\", [val], false);\n      return '\"' + val.fontFamily + '\"';\n    } else {\n      return val;\n    }\n  },\n  // With animationName we look for an object that contains keyframes and\n  // inject them as an `@keyframes` block, returning a uniquely generated\n  // name. The keyframes object should look like\n  //  animationName: {\n  //    from: {\n  //      left: 0,\n  //      top: 0,\n  //    },\n  //    '50%': {\n  //      left: 15,\n  //      top: 5,\n  //    },\n  //    to: {\n  //      left: 20,\n  //      top: 20,\n  //    }\n  //  }\n  // TODO(emily): `stringHandlers` doesn't let us rename the key, so I have\n  // to use `animationName` here. Improve that so we can call this\n  // `animation` instead of `animationName`.\n  animationName: function animationName(val) {\n    if (typeof val !== \"object\") {\n      return val;\n    } // Generate a unique name based on the hash of the object. We can't\n    // just use the hash because the name can't start with a number.\n    // TODO(emily): this probably makes debugging hard, allow a custom\n    // name?\n\n\n    var name = 'keyframe_' + (0, _util.hashObject)(val); // Since keyframes need 3 layers of nesting, we use `generateCSS` to\n    // build the inner layers and wrap it in `@keyframes` ourselves.\n\n    var finalVal = '@keyframes ' + name + '{';\n    Object.keys(val).forEach(function (key) {\n      finalVal += (0, _generate.generateCSS)(key, [val[key]], stringHandlers, false);\n    });\n    finalVal += '}';\n    injectGeneratedCSSOnce(name, finalVal);\n    return name;\n  }\n}; // This is a map from Aphrodite's generated class names to `true` (acting as a\n// set of class names)\n\nvar alreadyInjected = {}; // This is the buffer of styles which have not yet been flushed.\n\nvar injectionBuffer = \"\"; // A flag to tell if we are already buffering styles. This could happen either\n// because we scheduled a flush call already, so newly added styles will\n// already be flushed, or because we are statically buffering on the server.\n\nvar isBuffering = false;\n\nvar injectGeneratedCSSOnce = function injectGeneratedCSSOnce(key, generatedCSS) {\n  if (!alreadyInjected[key]) {\n    if (!isBuffering) {\n      // We should never be automatically buffering on the server (or any\n      // place without a document), so guard against that.\n      if (typeof document === \"undefined\") {\n        throw new Error(\"Cannot automatically buffer without a document\");\n      } // If we're not already buffering, schedule a call to flush the\n      // current styles.\n\n\n      isBuffering = true;\n      (0, _asap2['default'])(flushToStyleTag);\n    }\n\n    injectionBuffer += generatedCSS;\n    alreadyInjected[key] = true;\n  }\n};\n\nvar injectStyleOnce = function injectStyleOnce(key, selector, definitions, useImportant) {\n  if (!alreadyInjected[key]) {\n    var generated = (0, _generate.generateCSS)(selector, definitions, stringHandlers, useImportant);\n    injectGeneratedCSSOnce(key, generated);\n  }\n};\n\nexports.injectStyleOnce = injectStyleOnce;\n\nvar reset = function reset() {\n  injectionBuffer = \"\";\n  alreadyInjected = {};\n  isBuffering = false;\n  styleTag = null;\n};\n\nexports.reset = reset;\n\nvar startBuffering = function startBuffering() {\n  if (isBuffering) {\n    throw new Error(\"Cannot buffer while already buffering\");\n  }\n\n  isBuffering = true;\n};\n\nexports.startBuffering = startBuffering;\n\nvar flushToString = function flushToString() {\n  isBuffering = false;\n  var ret = injectionBuffer;\n  injectionBuffer = \"\";\n  return ret;\n};\n\nexports.flushToString = flushToString;\n\nvar flushToStyleTag = function flushToStyleTag() {\n  var cssContent = flushToString();\n\n  if (cssContent.length > 0) {\n    injectStyleTag(cssContent);\n  }\n};\n\nexports.flushToStyleTag = flushToStyleTag;\n\nvar getRenderedClassNames = function getRenderedClassNames() {\n  return Object.keys(alreadyInjected);\n};\n\nexports.getRenderedClassNames = getRenderedClassNames;\n\nvar addRenderedClassNames = function addRenderedClassNames(classNames) {\n  classNames.forEach(function (className) {\n    alreadyInjected[className] = true;\n  });\n};\n\nexports.addRenderedClassNames = addRenderedClassNames;\n/**\n * Inject styles associated with the passed style definition objects, and return\n * an associated CSS class name.\n *\n * @param {boolean} useImportant If true, will append !important to generated\n *     CSS output. e.g. {color: red} -> \"color: red !important\".\n * @param {Object[]} styleDefinitions style definition objects as returned as\n *     properties of the return value of StyleSheet.create().\n */\n\nvar injectAndGetClassName = function injectAndGetClassName(useImportant, styleDefinitions) {\n  // Filter out falsy values from the input, to allow for\n  // `css(a, test && c)`\n  var validDefinitions = styleDefinitions.filter(function (def) {\n    return def;\n  }); // Break if there aren't any valid styles.\n\n  if (validDefinitions.length === 0) {\n    return \"\";\n  }\n\n  var className = validDefinitions.map(function (s) {\n    return s._name;\n  }).join(\"-o_O-\");\n  injectStyleOnce(className, '.' + className, validDefinitions.map(function (d) {\n    return d._definition;\n  }), useImportant);\n  return className;\n};\n\nexports.injectAndGetClassName = injectAndGetClassName;","map":null,"metadata":{},"sourceType":"script"}