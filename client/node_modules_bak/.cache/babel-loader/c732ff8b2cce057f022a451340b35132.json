{"ast":null,"code":"/*\n  Ported to JavaScript by Lazar Laszlo 2011\n\n  lazarsoft@gmail.com, www.lazarsoft.info\n\n*/\n\n/*\n*\n* Copyright 2007 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport { URShift } from './qrcode';\nvar DataMask = {};\n\nDataMask.forReference = function (reference) {\n  if (reference < 0 || reference > 7) {\n    throw \"System.ArgumentException\";\n  }\n\n  return DataMask.DATA_MASKS[reference];\n};\n\nfunction DataMask000() {\n  this.unmaskBitMatrix = function (bits, dimension) {\n    for (var i = 0; i < dimension; i++) {\n      for (var j = 0; j < dimension; j++) {\n        if (this.isMasked(i, j)) {\n          bits.flip(j, i);\n        }\n      }\n    }\n  };\n\n  this.isMasked = function (i, j) {\n    return (i + j & 0x01) == 0;\n  };\n}\n\nfunction DataMask001() {\n  this.unmaskBitMatrix = function (bits, dimension) {\n    for (var i = 0; i < dimension; i++) {\n      for (var j = 0; j < dimension; j++) {\n        if (this.isMasked(i, j)) {\n          bits.flip(j, i);\n        }\n      }\n    }\n  };\n\n  this.isMasked = function (i, j) {\n    return (i & 0x01) == 0;\n  };\n}\n\nfunction DataMask010() {\n  this.unmaskBitMatrix = function (bits, dimension) {\n    for (var i = 0; i < dimension; i++) {\n      for (var j = 0; j < dimension; j++) {\n        if (this.isMasked(i, j)) {\n          bits.flip(j, i);\n        }\n      }\n    }\n  };\n\n  this.isMasked = function (i, j) {\n    return j % 3 == 0;\n  };\n}\n\nfunction DataMask011() {\n  this.unmaskBitMatrix = function (bits, dimension) {\n    for (var i = 0; i < dimension; i++) {\n      for (var j = 0; j < dimension; j++) {\n        if (this.isMasked(i, j)) {\n          bits.flip(j, i);\n        }\n      }\n    }\n  };\n\n  this.isMasked = function (i, j) {\n    return (i + j) % 3 == 0;\n  };\n}\n\nfunction DataMask100() {\n  this.unmaskBitMatrix = function (bits, dimension) {\n    for (var i = 0; i < dimension; i++) {\n      for (var j = 0; j < dimension; j++) {\n        if (this.isMasked(i, j)) {\n          bits.flip(j, i);\n        }\n      }\n    }\n  };\n\n  this.isMasked = function (i, j) {\n    return (URShift(i, 1) + j / 3 & 0x01) == 0;\n  };\n}\n\nfunction DataMask101() {\n  this.unmaskBitMatrix = function (bits, dimension) {\n    for (var i = 0; i < dimension; i++) {\n      for (var j = 0; j < dimension; j++) {\n        if (this.isMasked(i, j)) {\n          bits.flip(j, i);\n        }\n      }\n    }\n  };\n\n  this.isMasked = function (i, j) {\n    var temp = i * j;\n    return (temp & 0x01) + temp % 3 == 0;\n  };\n}\n\nfunction DataMask110() {\n  this.unmaskBitMatrix = function (bits, dimension) {\n    for (var i = 0; i < dimension; i++) {\n      for (var j = 0; j < dimension; j++) {\n        if (this.isMasked(i, j)) {\n          bits.flip(j, i);\n        }\n      }\n    }\n  };\n\n  this.isMasked = function (i, j) {\n    var temp = i * j;\n    return ((temp & 0x01) + temp % 3 & 0x01) == 0;\n  };\n}\n\nfunction DataMask111() {\n  this.unmaskBitMatrix = function (bits, dimension) {\n    for (var i = 0; i < dimension; i++) {\n      for (var j = 0; j < dimension; j++) {\n        if (this.isMasked(i, j)) {\n          bits.flip(j, i);\n        }\n      }\n    }\n  };\n\n  this.isMasked = function (i, j) {\n    return ((i + j & 0x01) + i * j % 3 & 0x01) == 0;\n  };\n}\n\nDataMask.DATA_MASKS = [new DataMask000(), new DataMask001(), new DataMask010(), new DataMask011(), new DataMask100(), new DataMask101(), new DataMask110(), new DataMask111()];\nexport default DataMask;","map":null,"metadata":{},"sourceType":"module"}