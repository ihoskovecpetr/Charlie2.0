{"ast":null,"code":"/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\n/* eslint-env node */\n'use strict';\n\nvar logDisabled_ = true; // Utility methods.\n\nvar utils = {\n  disableLog: function disableLog(bool) {\n    if (typeof bool !== 'boolean') {\n      return new Error('Argument type: ' + typeof bool + '. Please use a boolean.');\n    }\n\n    logDisabled_ = bool;\n    return bool ? 'adapter.js logging disabled' : 'adapter.js logging enabled';\n  },\n  log: function log() {\n    if (typeof window === 'object') {\n      if (logDisabled_) {\n        return;\n      }\n\n      if (typeof console !== 'undefined' && typeof console.log === 'function') {\n        console.log.apply(console, arguments);\n      }\n    }\n  },\n\n  /**\n   * Extract browser version out of the provided user agent string.\n   *\n   * @param {!string} uastring userAgent string.\n   * @param {!string} expr Regular expression used as match criteria.\n   * @param {!number} pos position in the version string to be returned.\n   * @return {!number} browser version.\n   */\n  extractVersion: function extractVersion(uastring, expr, pos) {\n    var match = uastring.match(expr);\n    return match && match.length >= pos && parseInt(match[pos], 10);\n  },\n\n  /**\n   * Browser detector.\n   *\n   * @return {object} result containing browser, version and minVersion\n   *     properties.\n   */\n  detectBrowser: function detectBrowser() {\n    // Returned result object.\n    var result = {};\n    result.browser = null;\n    result.version = null;\n    result.minVersion = null; // Fail early if it's not a browser\n\n    if (typeof window === 'undefined' || !window.navigator) {\n      result.browser = 'Not a browser.';\n      return result;\n    } // Firefox.\n\n\n    if (navigator.mozGetUserMedia) {\n      result.browser = 'firefox';\n      result.version = this.extractVersion(navigator.userAgent, /Firefox\\/([0-9]+)\\./, 1);\n      result.minVersion = 31; // all webkit-based browsers\n    } else if (navigator.webkitGetUserMedia) {\n      // Chrome, Chromium, Webview, Opera, all use the chrome shim for now\n      if (window.webkitRTCPeerConnection) {\n        result.browser = 'chrome';\n        result.version = this.extractVersion(navigator.userAgent, /Chrom(e|ium)\\/([0-9]+)\\./, 2);\n        result.minVersion = 38; // Safari or unknown webkit-based\n        // for the time being Safari has support for MediaStreams but not webRTC\n      } else {\n        // Safari UA substrings of interest for reference:\n        // - webkit version:           AppleWebKit/602.1.25 (also used in Op,Cr)\n        // - safari UI version:        Version/9.0.3 (unique to Safari)\n        // - safari UI webkit version: Safari/601.4.4 (also used in Op,Cr)\n        //\n        // if the webkit version and safari UI webkit versions are equals,\n        // ... this is a stable version.\n        //\n        // only the internal webkit version is important today to know if\n        // media streams are supported\n        //\n        if (navigator.userAgent.match(/Version\\/(\\d+).(\\d+)/)) {\n          result.browser = 'safari';\n          result.version = this.extractVersion(navigator.userAgent, /AppleWebKit\\/([0-9]+)\\./, 1);\n          result.minVersion = 602; // unknown webkit-based browser\n        } else {\n          result.browser = 'Unsupported webkit-based browser ' + 'with GUM support but no WebRTC support.';\n          return result;\n        }\n      } // Edge.\n\n    } else if (navigator.mediaDevices && navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)) {\n      result.browser = 'edge';\n      result.version = this.extractVersion(navigator.userAgent, /Edge\\/(\\d+).(\\d+)$/, 2);\n      result.minVersion = 10547; // Default fallthrough: not supported.\n    } else {\n      result.browser = 'Not a supported browser.';\n      return result;\n    } // Warn if version is less than minVersion.\n\n\n    if (result.version < result.minVersion) {\n      utils.log('Browser: ' + result.browser + ' Version: ' + result.version + ' < minimum supported version: ' + result.minVersion + '\\n some things might not work!');\n    }\n\n    return result;\n  }\n}; // Export.\n\nmodule.exports = {\n  log: utils.log,\n  disableLog: utils.disableLog,\n  browserDetails: utils.detectBrowser(),\n  extractVersion: utils.extractVersion\n};","map":null,"metadata":{},"sourceType":"script"}