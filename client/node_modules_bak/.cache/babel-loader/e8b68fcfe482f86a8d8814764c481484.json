{"ast":null,"code":"import _defineProperty from \"/Users/petrhoskovec/Desktop/code/Charlie2.0/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/petrhoskovec/Desktop/code/Charlie2.0/client/src/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\nimport { ApolloClient, InMemoryCache, HttpLink, split, gql } from \"apollo-boost\";\nimport { BatchHttpLink } from \"apollo-link-batch-http\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { setContext } from \"apollo-link-context\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport App from \"./App\";\nvar GQL_ENDPOINT = \"http://localhost:4005/graphql\";\n\nif (process.env.NODE_ENV == \"production\") {\n  GQL_ENDPOINT = \"https://\".concat(window.location.host, \"/graphql\");\n}\n\nconst httpLink = new BatchHttpLink({\n  uri: GQL_ENDPOINT,\n  headers: {\n    authorization: window.localStorage.getItem(\"token\")\n  }\n});\nvar WS_ENDPOINT = \"ws://localhost:4005/subs\";\n\nif (process.env.NODE_ENV == \"production\") {\n  WS_ENDPOINT = \"wss://\".concat(window.location.host, \"/subs\");\n}\n\nconst wsLink = new WebSocketLink({\n  uri: WS_ENDPOINT,\n  options: {\n    reconnect: true\n  }\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  // get the authentication token from local storage if it exists\n  const token = window.localStorage.getItem(\"token\"); // return the headers to the context so httpLink can read them\n\n  return {\n    headers: _objectSpread({}, headers, {\n      authorization: \"Bearer \".concat(token)\n    })\n  };\n});\nconst link = split(({\n  query\n}) => {\n  const _getMainDefinition = getMainDefinition(query),\n        kind = _getMainDefinition.kind,\n        operation = _getMainDefinition.operation;\n\n  return kind === \"OperationDefinition\" && operation === \"subscription\";\n}, wsLink, authLink.concat(httpLink));\nconst defaultOptions = {\n  // watchQuery: {\n  //   fetchPolicy: \"no-cache\",\n  //   errorPolicy: \"ignore\"\n  // },\n  query: {\n    fetchPolicy: \"network-only\",\n    errorPolicy: \"all\"\n  }\n}; //const link = httpLink;\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  defaultOptions: defaultOptions\n}); // const client = new ApolloClient({\n//     uri: \"http://localhost:8008\", cache: new InMemoryCache()\n//   });\n\nReactDOM.hydrate(React.createElement(ApolloProvider, {\n  client: client,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 87\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 88\n  },\n  __self: this\n})), document.getElementById(\"root\")); // <Router>\n//     <Route component={props => <App {...props} />} />\n//   </Router>","map":{"version":3,"sources":["/Users/petrhoskovec/Desktop/code/Charlie2.0/client/src/index.js"],"names":["React","ReactDOM","Route","BrowserRouter","Router","ApolloClient","InMemoryCache","HttpLink","split","gql","BatchHttpLink","ApolloProvider","WebSocketLink","setContext","getMainDefinition","App","GQL_ENDPOINT","process","env","NODE_ENV","window","location","host","httpLink","uri","headers","authorization","localStorage","getItem","WS_ENDPOINT","wsLink","options","reconnect","authLink","_","token","link","query","kind","operation","concat","defaultOptions","fetchPolicy","errorPolicy","client","cache","hydrate","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  HttpLink,\n  split,\n  gql\n} from \"apollo-boost\";\nimport { BatchHttpLink } from \"apollo-link-batch-http\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { setContext } from \"apollo-link-context\";\nimport { getMainDefinition } from \"apollo-utilities\";\n\nimport App from \"./App\";\n\nvar GQL_ENDPOINT = `http://localhost:4005/graphql`;\nif (process.env.NODE_ENV == \"production\") {\n  GQL_ENDPOINT = `https://${window.location.host}/graphql`;\n}\nconst httpLink = new BatchHttpLink({\n  uri: GQL_ENDPOINT,\n  headers: {\n    authorization: window.localStorage.getItem(\"token\")\n  }\n});\n\nvar WS_ENDPOINT = `ws://localhost:4005/subs`;\nif (process.env.NODE_ENV == \"production\") {\n  WS_ENDPOINT = `wss://${window.location.host}/subs`;\n}\n\nconst wsLink = new WebSocketLink({\n  uri: WS_ENDPOINT,\n  options: {\n    reconnect: true\n  }\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = window.localStorage.getItem(\"token\");\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: `Bearer ${token}`\n    }\n  };\n});\n\nconst link = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query);\n    return kind === \"OperationDefinition\" && operation === \"subscription\";\n  },\n  wsLink,\n  authLink.concat(httpLink)\n);\n\nconst defaultOptions = {\n  // watchQuery: {\n  //   fetchPolicy: \"no-cache\",\n  //   errorPolicy: \"ignore\"\n  // },\n  query: {\n    fetchPolicy: \"network-only\",\n    errorPolicy: \"all\"\n  }\n};\n\n//const link = httpLink;\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n  defaultOptions: defaultOptions\n});\n\n// const client = new ApolloClient({\n//     uri: \"http://localhost:8008\", cache: new InMemoryCache()\n//   });\n\nReactDOM.hydrate(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n// <Router>\n//     <Route component={props => <App {...props} />} />\n//   </Router>\n"]},"metadata":{},"sourceType":"module"}