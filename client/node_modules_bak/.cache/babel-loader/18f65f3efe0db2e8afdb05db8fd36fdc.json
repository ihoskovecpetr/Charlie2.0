{"ast":null,"code":"import _slicedToArray from\"/Users/petrhoskovec/Desktop/code/Charlie2.0/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';export function useWindowSize(){var isClient=typeof window==='object';function getSize(){return{width:isClient?window.innerWidth:undefined,height:isClient?window.innerHeight:undefined};}var _useState=useState(getSize),_useState2=_slicedToArray(_useState,2),windowSize=_useState2[0],setWindowSize=_useState2[1];useEffect(function(){if(!isClient){return false;}function handleResize(){setWindowSize(getSize());}window.addEventListener('resize',handleResize);return function(){return window.removeEventListener('resize',handleResize);};},[]);// Empty array ensures that effect is only run on mount and unmount\nreturn windowSize;}","map":{"version":3,"sources":["/Users/petrhoskovec/Desktop/code/Charlie2.0/client/src/Hooks/useWindowSize.js"],"names":["React","useState","useEffect","useWindowSize","isClient","window","getSize","width","innerWidth","undefined","height","innerHeight","windowSize","setWindowSize","handleResize","addEventListener","removeEventListener"],"mappings":"qIAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CAGA,MAAO,SAASC,CAAAA,aAAT,EAAyB,CAC9B,GAAMC,CAAAA,QAAQ,CAAG,MAAOC,CAAAA,MAAP,GAAkB,QAAnC,CAEA,QAASC,CAAAA,OAAT,EAAmB,CACjB,MAAO,CACLC,KAAK,CAAEH,QAAQ,CAAGC,MAAM,CAACG,UAAV,CAAuBC,SADjC,CAELC,MAAM,CAAEN,QAAQ,CAAGC,MAAM,CAACM,WAAV,CAAwBF,SAFnC,CAAP,CAID,CAR6B,cAUMR,QAAQ,CAACK,OAAD,CAVd,wCAUvBM,UAVuB,eAUXC,aAVW,eAY9BX,SAAS,CAAC,UAAM,CACd,GAAI,CAACE,QAAL,CAAe,CACb,MAAO,MAAP,CACD,CAED,QAASU,CAAAA,YAAT,EAAwB,CACtBD,aAAa,CAACP,OAAO,EAAR,CAAb,CACD,CAEDD,MAAM,CAACU,gBAAP,CAAwB,QAAxB,CAAkCD,YAAlC,EACA,MAAO,kBAAMT,CAAAA,MAAM,CAACW,mBAAP,CAA2B,QAA3B,CAAqCF,YAArC,CAAN,EAAP,CACD,CAXQ,CAWN,EAXM,CAAT,CAWQ;AAER,MAAOF,CAAAA,UAAP,CACD","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n\nexport function useWindowSize() {\n  const isClient = typeof window === 'object';\n\n  function getSize() {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    };\n  }\n\n  const [windowSize, setWindowSize] = useState(getSize);\n\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n    \n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n}"]},"metadata":{},"sourceType":"module"}